## The 100 RPG Game 
## Making classes for player, NPCs, weapons, potions  ##

import random as r, os

# default booleans
run = True # game is running
mainMenu = True # on main menu
play = False # playing game

# colors
bold = "\033[1m"
normal = "\x1b[0m" + "\x1b[38;2;255;255;255m"
italic = "\033[3m"
underline = "\033[4m"
strike = "\033[9m" # strikethrough
end = "\033[0m" # end any formatting
gold = "\x1b[38;2;230;190;0m\x1b[1m"
silver = "\x1b[38;2;221;221;221m\x1b[1m"
copper = "\x1b[38;2;170;44;0m\x1b[1m"
red = "\033[31m"
orange = '\x1b[38;2;255;90;0m\x1b[1m'
yellow = "\033[33m"
green = "\033[32m"
blue =  "\033[34m"
purple = "\033[35m"
cyan = "\033[36m"
white = "\033[37m"
gray = "\033[1;30m"

# formatting
def Title(): # print out game header
    title = "The 100 RPG Game"
    Title = f"{italic}{bold}{green}{title:^80}{end}"
    author = "by @RaiBread"
    print(Title)
    print(f"{purple}{author:^80}{end}\n")
def clear():
    os.system("clear")
def enter():
    input(f"\n[{bold}{cyan}Enter{end}] to continue\n")
def draw():
    print(f"{strike}Xx                   xX{end}")

def diceRoll(numOfSides):
  roll = r.randint(1, numOfSides)
  return roll

class Player:
    def __init__(self, name, currentHP, maxHP, gp, strength, dex, xp, equipped_weapon, equipped_offhand, inv=None):
        self.name = name
        self.currentHP = currentHP
        self.maxHP = maxHP
        self.gp = gp
        self.strength = strength
        self.dex = dex
        self.xp = xp
        self.equipped_weapon = equipped_weapon
        self.equipped_offhand = equipped_offhand
        if inv is None: # doing this so we don't have a mutable list set as the default
            self.inv = []
        else:
            self.inv = inv
    
    def print_inventory(self): ### ADD: have it also print the quantity of each item to this code
        print(f"\n{green}Health{end}: {self.currentHP}/{self.maxHP} ðŸ©¸") # printing health
        print(f"{gold}Gold{end}: {self.gp}")
        print(f"\nEquipped Weapon: {player.equipped_weapon.name}\nEquipped Offhand: {player.equipped_offhand}")
        print(f"\n{bold}Inventory:{end}\n")
        counter = 1
        for i in self.inv:
            print(f"{counter}] ", *i.title(), sep = "", end = "\n")
            counter += 1

class NPC:
    num_of_NPCs = 0
    def __init__ (self, name): ###CODE THIS, ADD MORE ATTRIBUTES
        self.name = name

        NPC.num_of_NPCs += 1

class Enemy: ### ADD CODE: any other attributes that become necessary
    num_of_enemies = 0
    def __init__ (self, name, armor_class, currentHP, HP, dropItem, dropGP):
        self.name = name
        self.armor_class = armor_class
        self.currentHP = currentHP
        self.HP = HP
        self.dropItem = dropItem
        self.dropGP = dropGP

        Enemy.num_of_enemies +=1 # keep a count of how many enemies exist

class Weapons: 
    num_of_weapons = 0
    def __init__(self, name, desc, price, finesse, melee, range, num_of_sides):
        self.name = name
        self.desc = desc
        self.price = price
        self.finesse = finesse
        self.melee = melee
        self.range = range
        self.num_of_sides = num_of_sides # which die needs to be rolled for that weapon
    
        Weapons.num_of_weapons += 1
    
    def attack(self): ### ADD alter code so this is a two-way battle
        if self.finesse == True: # if weapon is finesse, choose between strength and dexterity for your attack
            strength_or_dex = input(f"Do you want to use your Strength ({player.strength}) or Dexterity ({player.dex}) modifier?\n> ").strip().title()
            ### ADD THE ENEMY'S ATTACKS TO THIS ONCE YOU CREATE THE ENEMIES ###
            while enemy.currentHP > 0: 
                if strength_or_dex[0] == 'S' or strength_or_dex[0] == str(f'{player.strength}'): # if choose strength
                    attack_roll = diceRoll(20) + player.strength
                    if attack_roll >= enemy.armor_class: # if attack roll successful, on to do damage
                        damage_roll = diceRoll(self.num_of_sides) + player.strength
                        enemy.currentHP -= damage_roll
                        print(f'\nYou were adept with your {self.name} and dealt the {enemy.name} {damage_roll} damage!\nThe {enemy.name} has {enemy.currentHP}/{enemy.HP} HP')
                        enter()
                        clear()
                    else: 
                        print("You miss them and deal no damage.")
                        enter()
                        clear()
                elif strength_or_dex[0] == 'D' or strength_or_dex[0] == str(f'{player.dex}'): # if choose dex
                    attack_roll = diceRoll(20) + player.dex
                    if attack_roll >= enemy.armor_class: # if attack roll successful, on to do damage
                        damage_roll = diceRoll(self.num_of_sides) + player.dex
                        enemy.currentHP -= damage_roll
                        print(f'\nYou were adept with your {self.name} and dealt the {enemy.name} {damage_roll} damage!\nThe {enemy.name} has {enemy.currentHP}/{enemy.HP} HP')
                        enter()
                        clear()
                    else: 
                        print("You miss them and deal no damage.")
                        enter()
                        clear()
                
        elif self.melee == True:
            input('Hit any key to attack') ### ADD: give two attack options
            while enemy.currentHP > 0: 
                clear()
                attack_roll = diceRoll(20) + player.strength
                if attack_roll >= enemy.armor_class:
                    damage_roll = diceRoll(self.num_of_sides) + player.strength
                    enemy.currentHP -= damage_roll
                    print(f'\nYou were adept with your {self.name} and dealt the {enemy.name} {damage_roll} damage!\nThe {enemy.name} has {enemy.currentHP}/{enemy.HP} HP')
                    enter()
                    clear()
                else: 
                    print("You miss them and deal no damage.")
                    enter()
                    clear()

        elif self.range == True: # if range weapon, use dexterity modifier
            input('Hit any key to attack') ### ADD: give two attack options
            while enemy.currentHP > 0: 
                clear()
                attack_roll = diceRoll(20) + player.dex
                if attack_roll >= enemy.armor_class:
                    damage_roll = diceRoll(self.num_of_sides) + player.dex
                    enemy.currentHP -= damage_roll
                    print(f'\nYou were adept with your {self.name} and dealt the {enemy.name} {damage_roll} damage!\nThe {enemy.name} has {enemy.currentHP}/{enemy.HP} HP')
                    enter()
                    clear()
                else: 
                    print("You miss them and deal no damage.")
                    enter()
                    clear()
            
        if enemy.currentHP <= 0:
            print(f"You have defeated the {enemy.name}! They dropped a {enemy.dropItem} and {enemy.dropGP} gp")
            (player.inv).append(enemy.dropItem)
            player.gp += enemy.dropGP
            return player.inv, player.gp


class Potions:
    num_of_potions = 0
    def __init__(self, name, desc, price, effect):
        self.name = name
        self.desc = desc
        self.price = price
        self.effect = effect

        Potions.num_of_potions += 1
        
    def drinkPotion(self): # call function when want to drink potion/gain effects from them
        if self.name == 'knowledge potion':
            print(knowledge_potion.effect)
            player.xp += 15
            return player.xp
        elif self.name == 'health potion':
            print(health_potion.effect)
            player.currentHP += 5
            return player.xp
    

class Offhands(Potions):
    num_of_offhands = 0
    def __init__(self, name, desc, price, effect):
        super().__init__(name, desc, price, effect)

        Offhands.num_of_offhands += 1

# list of all weapons
glaive = Weapons('glaive', 'This glaive boasts a gleaming obsidian blade with intricate,\nethereal runes etched along its length, set upon a polished, ebony-hued\nshaft adorned with menacing, dragon-shaped pommel.', 20, False, True, False, 10)
rapier = Weapons('rapier', 'This rapier is an elegantly slender and silvered blade,\nits handle intricately adorned with sapphire-encrusted crossguards\nand a hilt of black leather wrapped in silver thread.', 25, False, True, False, 8)
dagger = Weapons('dagger', 'The dagger gleams with a wickedly curved obsidian blade,\na hilt wrapped in midnight-blue leather, and\na pommel adorned with a menacing onyx gemstone.', 2, True, False, False, 4)
crossbow = Weapons('crossbow', 'This crossbow features a sleek, polished mahogany stock adorned\nwith intricate ivory inlays, a glistening steel barrel, and an\nexquisitely carved ebony trigger guard, giving it\nan air of both beauty and deadly precision.', 25, False, False, True, 8)
butterfly_sword = Weapons('butterfly sword', 'The butterfly sword boasts a pair of elegantly slender blades\nwith intricately carved jade hilts, their unique S-shaped guards\ndesigned for fluid, acrobatic combat techniques.', 10, True, False, False, 6)
reaper_stick = Weapons('reaper stick', 'WRITE DESCRIPTION', 10, False, True, False, 8)
reaper_cleaver = Weapons('reaper cleaver', 'The Reaper Cleaver is a massive, double-edged greataxe\nwith a rusted and jagged blade, imbued with a menacing aura,\nsuggesting the cruelty of its wielder.', 30, False, True, False, 12)

# list of all potions
health_potion = Potions('health potion', 'A glimmering green liquid', 3, "You ingest the green potion and gain 5 health")
knowledge_potion = Potions('knowledge potion', 'A swirling pearl potion which helps you gain knowledge', 5, "You drink the potion and gain 15 XP")

# list of all enemies
reaper = Enemy('reaper', 10, 15, 15, reaper_stick.name, 3)
azgeda = Enemy('azgeda warrior', 12, 20, 20, butterfly_sword.name, 5)
enemy = r.choice((reaper, azgeda)) 




Title()
print("\nChoose your fighter:\n")
draw()
print(f"[{bold}{red}Jaka {normal}(Thief){end}\t\t\tGood strength       |  Excellent dexterity  |  Dagger")
print(f"[{bold}{yellow}Wanheda {normal}(Commander of Death){end}\tExcellent strength  |  Ok dexterity         |  Rapier")
print(f"[{bold}{cyan}Fleimkepa {normal}(Flamekeeper){end}\tGood strength       |  Excellent dexterity  |  Glaive")
print(f"[{bold}{purple}Gona {normal}(Warrior){end}\t\tExcellent strength  |  Good dexterity       |  Crossbow")
draw()
choice = input("> ").strip().title()
if choice[0] == "J":
    player = Player('Jaka', 20, 20, 10, 3, 4, 0, dagger, None, [dagger.name, health_potion.name]) # passing in information about player
elif choice[0] == "W":
    player  = Player('Wanheda', 20, 20, 10, 4, 2, 0, rapier, None, [rapier.name, health_potion.name])
elif choice[0] == "F":
    player  = Player('Fleimkepa', 20, 20, 10, 3, 5, 0, glaive, None, [glaive.name, health_potion.name])
elif choice[0] == "G":
    player  = Player('Gona', 20, 20, 10, 5, 3, 0, crossbow, None, [crossbow.name, health_potion.name])

### TESTING AS I GO
reaper_cleaver.attack()
player.print_inventory()
