## The 100 RPG
## Making classes for player, NPCs, weapons, potions  ##

import random as r, os, pickle, time as t
from dictionaries import crimes, inv_items

# default booleans
run = True # game is running
mainMenu = True # on main menu
play = False # playing game

# booleans for locations
in_Dropship = False
in_MtWeather = False
in_Polis = False
in_TrikruWoods = False
in_Deadzone = False
in_ShallowValley = False
in_Tondc = False
in_Marketplace = False

# colors
bold = "\033[1m"
normal = "\x1b[0m" + "\x1b[38;2;255;255;255m"
italic = "\033[3m"
underline = "\033[4m"
strike = "\033[9m" # strikethrough
end = "\033[0m" # end any formatting
gold = "\x1b[38;2;230;190;0m\x1b[1m"
silver = "\x1b[38;2;221;221;221m\x1b[1m"
copper = "\x1b[38;2;170;44;0m\x1b[1m"
red = "\033[31m"
orange = '\x1b[38;2;255;90;0m\x1b[1m'
yellow = "\033[33m"
green = "\033[32m"
blue =  "\033[34m"
lime = '\x1b[38;2;00;255;00m\x1b[1m'
turquoise = '\x1b[38;2;0;255;255m\x1b[1m'
teal = '\x1b[38;2;0;170;170m\x1b[1m'
purple = "\033[35m"
cyan = "\033[36m"
white = "\033[37m"
gray = "\033[1;30m"

# formatting
def Title(): # print out game header
    title = "The 100 Role Player Game"
    Title = f"{italic}{bold}{green}{title:^80}{end}"
    author = f"{purple}by @RaiBread{end}"
    print(Title)
    print(f"{author:^90}\n")
def clear():
    os.system("clear")
    Title()
def enter():
    input(f"\n[{bold}{cyan}Enter{end}] to continue\n")
def draw():
    print(f"{strike}Xx             xOx            xX{end}")

class Player:
    def __init__(self, name, HP, maxHP, gp, str_ability, str_mod, dex_ability, dex_mod, const_ability, const_mod, int_ability, int_mod, wis_ability, wis_mod, char_ability, char_mod, prof_bonus, xp, AC, equipped_weapon=None, equipped_tek=None, inv=None):
        self.name = name
        self.HP = HP
        self.maxHP = maxHP
        self.gp = gp

        # D&D ability scores/modifiers
        self.str_ability = str_ability # strength
        self.str_mod = str_mod
        self.dex_ability = dex_ability # dexterity
        self.dex_mod = dex_mod
        self.const_ability = const_ability # constitution
        self.const_mod = const_mod
        self.int_ability = int_ability # intelligence
        self.int_mod = int_mod
        self.wis_ability = wis_ability # wisdom
        self.wis_mod = wis_mod
        self.char_ability = char_ability # charisma
        self.char_mod = char_mod
        self.prof_bonus = prof_bonus # proficiency bonus
        
        self.xp = xp
        self.AC = AC
        self.equipped_weapon = equipped_weapon
        self.equipped_tek = equipped_tek
        if inv is None: # doing this so we don't have a mutable list set as the default
            self.inv = {}
        else:
            self.inv = inv

    def add_to_inv(self, item, quantity):
        if item in self.inv: # if already have this item
            self.inv[item] += quantity # add quantity of it to existing quantity
        else: # if new item
            self.inv[item] = quantity # create new entry in inventory

    def remove_from_inv(self, item, quantity):
        if item in self.inv:
            if self.inv[item] >= quantity: 
                self.inv[item] -= quantity
                if self.inv[item] == 0:
                    del self.inv[item] # remove entry if quantity reaches 0
            else:
                print(f"You don't have enough {item.name} in your inventory")
        else:
            print(f"You don't have {item.name} in your inventory")

    def equip_weapon(self, selected_weapon):
        found_weapon = None

        for weapon in weapons_all:
            if weapon == selected_weapon:
                found_weapon = weapon
                break
        
        if found_weapon:
            self.equipped_weapon = found_weapon
            print(f"{green}>>{found_weapon.name} equipped<<{end}")
            t.sleep(0.5)
        else:
            print(f"You don't have {selected_weapon} in your inventory.")
            enter()

    def equip_tek(self, selected_tek):
        found_tek = None

        for tek in tek_all:
            if tek == selected_tek:
                found_tek = tek
                break
        
        if found_tek:
            self.equipped_tek = found_tek
            print(f"{green}>>{found_tek.name} equipped<<{end}")
            t.sleep(0.5)
        else:
            print(f"You don't have {selected_tek} in your inventory.")
            enter()

    def battle(self, target): 
        round = 1
        while target.HP > 0: # battle loop
            # print battle screen and round number
            def print_battle_title():
                clear()
                bt = f"{bold}{red}xX  Time to Battle  Xx{end}" # title
                pr = f"{bold}Round {round}{end}"
                print(f"{bt:^90}") # print battle screen
                print(f"{pr:^90}") # round number
                print(f"\n{bold}{purple}{player.name.title()}{end}: {player.HP}/{player.maxHP} HP ðŸ©¸\n{bold}{yellow}{target.name.title()}{end}: {target.currentHP} /{target.HP} HP ðŸ©¸")
            print_battle_title()
            print("\nAttack | Use Item")
            attack_or_inv = input("> ").strip().lower()

            if attack_or_inv is not None:
                if attack_or_inv in ['a', 'attack']: # if choose attack
                    if self.equipped_weapon is not None:
                        if self.equipped_weapon.finesse == True: # if finesse weapon, choice of str or dex_mod
                                str_mod_or_dex_mod = input(f"Do you want to use your Strength ({self.str_mod}) or Dexterity ({self.dex_mod}) modifier?\n> ").strip().lower()
                    else: 
                        print('You need to equip a weapon before you battle')
                        break

                    # your move
                    print()
                    draw()
                    t.sleep(1)
                    if self.equipped_weapon.melee == True or (self.equipped_weapon.finesse == True and str_mod_or_dex_mod in ['s', 'str_mod', 'str']): # if choose str_mod or have to use str_mod bc melee weapon
                        attack_roll = diceRoll(20) + self.str_mod
                        if attack_roll >= target.armor_class: # if attack roll successful, on to do damage
                            damage_roll = diceRoll(self.equipped_weapon.num_of_sides) + self.str_mod
                            target.currentHP -= damage_roll
                            print(f'{bold}You were adept with your {self.equipped_weapon.name} and dealt the {target.name} {damage_roll} damage!{end}')
                        else: 
                            print(f"{bold}You miss them and deal no damage.{end}")
                    
                    elif self.equipped_weapon.range == True or (self.equipped_weapon.finesse == True and str_mod_or_dex_mod in ['d', 'dex_mod', 'dex_modterity']): # if choose dex_mod or need to use dex_mod because range weapon
                        attack_roll = diceRoll(20) + self.dex_mod
                        if attack_roll >= target.armor_class: # if attack roll successful, on to do damage
                            damage_roll = diceRoll(self.equipped_weapon.num_of_sides) + self.dex_mod
                            target.currentHP -= damage_roll
                            print(f'{bold}You were adept with your {self.equipped_weapon.name} and dealt the {target.name} {damage_roll} damage!{end}')
                        else: 
                            print(f"{bold}You miss them and deal no damage.{end}")
                
                    else:
                        print(f"{bold}{red}Invalid{end} command.\n\n{bold}{green}Valid{end} commands:\n's', 'str_mod', 'str'\n'd', 'dex_mod', 'dex_modterity'")
                        continue
                elif attack_or_inv in ['use item', 'item', 'inv', 'i', 'u']: # if want to use an item
                    print_inventory()
                    print_battle_title()
                    draw()
                    print(f"{bold}You used an inventory item as your turn.{end}")
                else:
                    print(f"{red}{bold}Invalid command.\n{green}Valid commands:{end}\n['a', 'attack'\n'use item', 'item', 'inv', 'i', 'u']")
                    t.sleep(1)
                    print_battle_title()
                    continue
            else:
                    print(f"{red}{bold}Invalid command.\n{green}Valid commands:{end}\n['a', 'attack'\n'use item', 'item', 'inv', 'i', 'u']")
                    t.sleep(1)
                    continue
            
            # if kill enemy
            if target.currentHP <= 0: # if enemy dies
                draw()
                t.sleep(1)
                print(f"\nYou have defeated the {target.name}!\n\nThey dropped a {bold}{copper}{target.dropItem.name}{end} and {gold}{target.dropGP} gp{end}.\n\nYou gained 3 HP back ðŸ©¸.")
                self.add_to_inv(target.dropItem, 1)
                self.gp += target.dropGP
                self.xp += 30
                self.HP += 3
                return self.inv, self.gp, self.xp

            # enemy's move
            t.sleep(1)
            if target.equipped_weapon.melee == True or target.equipped_weapon.finesse == True:
                tattack_roll = diceRoll(20) + target.strength
                if tattack_roll >= self.AC: # if attack roll successful, on to do damage
                    tdamage_roll = diceRoll(target.equipped_weapon.num_of_sides) + target.strength
                    self.HP -= tdamage_roll
                    print(f'\n{bold}The {target.name} dealt you {tdamage_roll} damage{end}')
                else: 
                    print(f'\n{bold}The {target.name} missed you and dealt no damage!{end}')
            
            elif target.equipped_weapon.range == True:
                tattack_roll = diceRoll(20) + target.dex
                if tattack_roll >= self.AC: # if attack roll successful, on to do damage
                    tdamage_roll = diceRoll(target.equipped_weapon.num_of_sides) + target.dex
                    self.HP -= tdamage_roll
                    print(f'\n{bold}The {target.name} dealt you {tdamage_roll} damage{end}')
                else: 
                    print(f'{bold}The {target.name} missed you and dealt no damage!{end}')
            draw()

            # if enemy kills player
            if self.HP <= 0:
                t.sleep(1)
                print('\nYu gonplei ste odon.\nMay we meet again.')
                quit()
            
            # if nobody dies
            if self.HP > 0 and target.HP > 0:
                
                t.sleep(1)
                print(f"\nYou have both survived round {round}! ðŸŽ‰")
                round += 1
                t.sleep(1)
                enter()
                print_battle_title()
                
    def print_stats(self):
        clear()
        print(f"{bold}{underline}{self.name}{end}")
        print(f"\n{lime}{bold}Health{white}\t\t  | {self.HP}/{self.maxHP} ðŸ©¸\n{gold}Gold{white}\t\t  | {self.gp}")
        print(f"{cyan}Proficiency Bonus{white} | {self.prof_bonus}")
        print(f"{teal}XP {white}\t\t  | {self.xp}")
        print(f"{turquoise}Armor Class {white}\t  | {self.AC}{end}")
        draw()
        print(f"{bold}\n\t   Ability    Modifier")
        print(f"{red}Strength{white}     | {self.str_ability} | {self.str_mod}")
        print(f"{orange}Dexterity{white}    | {self.dex_ability} | {self.dex_mod}")
        print(f"{yellow}Constitution{white} | {self.const_ability} | {self.const_mod}")
        print(f"{green}Intelligence{white} | {self.int_ability} | {self.int_mod}")
        print(f"{blue}Wisdom{white}\t     | {self.wis_ability}  | {self.wis_mod}")
        print(f"{purple}Charisma{white}     | {self.char_ability} | {self.char_mod}")
        enter()

    def save_game(self, filename):
        try:
            with open(filename, "wb") as file:
                pickle.dump(self, file)
            print(f'{green}>>game saved<<{end}')
            t.sleep(0.5)
        except Exception as e:
            print(f"{red}Error saving game: {str(e)}{end}")

    @staticmethod
    def load_game(filename): ### FIX: There is a problem when loading from a new game, doesn't recognize player
        try:
            with open(filename, "rb") as file:
                player = pickle.load(file)
            print(f'{green}>>loaded successfully<<{end}')
            return player
        except FileNotFoundError:
            print(">>no saved game found<<")
            return None
        except Exception as e:
            print(f"{red}Error loading game: {str(e)}")

def print_inventory():
    while True:
        clear()
        print(f"{bold}{underline}{player.name}{end}")
        print(f"\n{green}Health{end}: {player.HP}/{player.maxHP} ðŸ©¸") # printing health
        print(f"{gold}Gold{end}: {player.gp}")
        if player.equipped_weapon is not None:
            print(f"\n{bold}Equipped Weapon:{end} {(player.equipped_weapon.name).title()}")
        else:
            print(f"\n{bold}Equipped Weapon:{end} {player.equipped_weapon}")
        
        if player.equipped_tek is not None:
            print(f"{bold}Equipped Tek:{end} {player.equipped_tek.name.title()}\n")
        else:
            print(f"{bold}Equipped Tek:{end} {player.equipped_tek}\n")
            
        print(f"\n{bold}{purple}Inventory:\n{end}")
        
        draw()
        counter = 1
        for item, quantity in player.inv.items(): # print inventory
            if isinstance(item, Potions) or isinstance(item, Weapons) or isinstance(item, Tek):
                print(f"{purple}{counter}.{white} ", *item.name.title(), f" x {quantity}", sep = "", end = "\n")
            if isinstance(item, str):
                print(f"{purple}{counter}.{white} ", *item.title(), f" x {quantity}", sep = "", end = "\n")
            counter += 1
        draw()

        # inventory choices
        print(f"\n[{cyan}{bold}l{end}] to leave")
        choice = input("> ").strip().lower()
        if choice in ['l', 'leave', 'x', 'exit']: # leave
            break
        elif choice.isdigit():
            item_index = int(choice) - 1 # converting choice into an index of the inventory
            if 0 <= item_index <len(player.inv): # check whether item_index is in valid range of indices for inventory
                selected_item = list(player.inv.keys())[item_index] # assigning selected_item to item in inventory
                
                for potion in potions_all: # if potion
                    if selected_item == potion: 
                        while True:
                            print(f"\n{selected_item.name.title()}\nWhat would you like to do?\n| Sell | Exit | Use | Desc")
                            option = input("\n> ").strip().lower()
                            if option in ['s', 'sell']: # sell
                                player.remove_from_inv(selected_item, 1)
                                print(f"{gold}>> {selected_item.name} sold for {selected_item.price} gp <<{end}")
                                player.gp += selected_item.price
                                enter()
                                break
                            elif option in ['x', 'exit']: # exit
                                break
                            elif option in ['u', 'use', 'equip', 'e']: # use
                                selected_item = potion
                                selected_item.drinkPotion(player)
                                enter()
                                break
                            elif option in ['d', 'desc', 'description']: # description
                                selected_item = potion
                                print(selected_item.desc)
                                enter()
                                break
                            else:
                                print(f"{red}Invalid{end} Command\n\n{green}Valid{end} Commands:\n['s', 'sell'\n'x', 'exit'\n'u', 'use', 'equip', 'e',\n'd', 'desc', 'description']")
                                enter()

                for weapon in weapons_all: # if weapon
                    if selected_item == weapon: 
                        while True:
                            print(f"\n{selected_item.name.title()}\nWhat would you like to do?\n| Sell | Exit | Equip | Desc")
                            option = input("\n> ").strip().lower()
                            if option in ['s', 'sell']: # sell
                                player.remove_from_inv(selected_item, 1)
                                print(f"{gold}>> {selected_item.name} sold for {selected_item.price} gp <<{end}")
                                player.gp += selected_item.price
                                if selected_item == player.equipped_weapon:
                                    player.equipped_weapon = None
                                enter()
                                break
                            elif option in ['x', 'exit']: # exit
                                break
                            elif option in ['e', 'equip', 'u', 'use']: # equip
                                selected_item = weapon
                                player.equip_weapon(selected_item)
                                break
                            elif option in ['d', 'desc', 'description']: # description
                                selected_item = weapon
                                print(selected_item.desc)
                                enter()
                                break
                            else:
                                print(f"{red}Invalid{end} Command\n\n{green}Valid{end} Commands:\n['s', 'sell'\n'x', 'exit'\n'e', 'equip', 'u', 'use'\n'd', 'desc', 'description']")
                                enter()
                                continue
                
                for tek in tek_all: # if tek
                    if selected_item == tek:
                        while True:
                            print(f"\n{selected_item.name.title()}\nWhat would you like to do?\n| Sell | Exit | Equip | Use | Desc")
                            option = input("\n> ").strip().lower()
                            if option in ['s', 'sell']: # sell
                                player.remove_from_inv(selected_item, 1)
                                print(f"{gold}>> {selected_item.name} sold for {selected_item.price} gp <<{end}")
                                player.gp += selected_item.price
                                if selected_item == player.equipped_weapon:
                                    player.equipped_weapon = None
                                enter()
                                break
                            elif option in ['x', 'exit']: # exit
                                break
                            elif option in ['e', 'equip']: # equip
                                selected_item = tek
                                player.equip_tek(selected_item)
                                break
                            elif option in ['u', 'use']: # use item against another
                                selected_item.useTek(player) ### CODE the useTek function
                                enter()
                                break
                            elif option in ['d', 'desc', 'description']: # description
                                selected_item = tek
                                print(selected_item.desc)
                                enter()
                                break
                            else:
                                print(f"{red}Invalid{end} Command\n\n{green}Valid{end} Commands:\n['s', 'sell',\n'x', 'exit',\n'e', 'equip', 'u', 'use',\n'd', 'desc', 'description']")
                                enter()
                                continue
        
                for i in player.inv:
                    if isinstance(selected_item, str):
                        if selected_item == "1 days rations":
                            print(f"\n{selected_item.title()}\nWhat would you like to do?\n| Exit | Eat |")
                            option = input('\n> ').strip().lower()
                            if option in ['exit', 'x', 'l', 'leave']:
                                break
                            elif option in ['eat', 'e']:
                                print(f'{orange}You eat your rations and relish in the feeling of a full belly.{end}') ### Implement actualy eating functionality
                                player.remove_from_inv("1 days rations", 1)
                                enter()
                                break
                            else:
                                print(f"{bold}{red}Invalid command.\n{green}Valid commands:{end}\n['exit', 'x', 'l', 'leave'\n'eat', 'e'")
                                enter()
                        
                        elif selected_item == "small waterskin":
                            option = input(f"\n{selected_item.title()}\nWhat would you like to do?\n| Exit | Drink |\n\n> ")
                            if option in ['drink', 'd']:
                                print(f"{cyan}You drink the crisp water{end}")
                                player.remove_from_inv("small waterskin", 1) 
                                enter()
                                break
                            elif option in ['x', 'exit', 'l', 'leave']:
                                break
                            else:
                                print(f"{bold}{red}Invalid command.\n{green}Valid commands:{end}\n['x', 'exit', 'l', 'leave'\n'drink', 'd'")
                                enter()
                                continue

                        elif selected_item == "lockpick":
                            option = input(f"\n{selected_item.title()}\nWhat would you like to do?\n| Exit | Desc \n\n> ") ### add ability to use it in certain situations?
                            if option in ['x', 'exit', 'l', 'leave']:
                                break
                            elif option in ['desc', 'd', 'description']:
                                print('A slender, specialized tool crafted for manipulating the\n internal components of locks, enabling skilled individuals\nto covertly and skillfully open secured doors or containers.')
                                enter()
                                break
                            else:
                                print(f"{bold}{red}Invalid command.\n{green}Valid commands:{end}\n['x', 'exit', 'l', 'leave'\n'desc', 'd', 'description'")
                                enter()
                                continue
                        
                        elif selected_item == "portable device":
                            option = input(f"\n{selected_item.title()}\nWhat would you like to do?\n| Exit | Desc \n\n> ") ### add ability to use it in certain situations?
                            if option in ['x', 'exit', 'l', 'leave']:
                                break
                            elif option in ['desc', 'd', 'description']:
                                print('Portable device for analysing and diagnosing technical issues')
                            else:
                                print(f"{bold}{red}Invalid command.\n{green}Valid commands:{end}\n['x', 'exit', 'l', 'leave'\n'desc', 'd', 'description'")
                                enter()
                                continue

        else:
            print(f"{bold}{red}Invalid command.\n{green}Valid commands:{white}\n['l', 'leave', 'x', 'exit'\nor the corresponding number to the inventory item you want to select]{end}")
            enter()
def generate_code(length):
    symbols = ["&", "%", "$", "#", "@", "*", "+"]
    return ''.join(r.choice(symbols) for i in range(length))

def code_decryption_minigame():
    symbols_picked = []
    code_length = 4
    correct_code = generate_code(code_length)
    lives = 5
    minigame_title = f"{orange}{strike}Xx  {end} {orange}Decrypt the Code{strike}  xX{end}\n"
    # print(f"ANSWER: {correct_code}")

    while True:
        clear()
        print(f"{minigame_title:>110}")
        print("You encounter a control panel with mysterious symbols.\n")

        code_solved = True # checking if the entire code is correct
        for i in correct_code:
            if i in symbols_picked:
                print(f"{bold}{i}{end}", end=" ")
                code_solved = True
            else:
                print(f"{bold}_{end}", end = " ")
                code_solved = False
        
        print(f"\n\nSymbols: {bold}{orange}&, %, $, #, @, *, +{end}") ### consider changing this so it's kinda like hangman? correct symbols stay
        print(f"\n{lives} Lives Left")
        
        player_guess = input("\nGuess a symbol you think is in the code\n> ").strip().lower()

        if player_guess in symbols_picked: # if you already picked that symbol
            print(f'You\'ve already guessed symbol {player_guess}')
            enter()
            continue
        symbols_picked.append(player_guess) # add symbol to list

        if player_guess in correct_code: # if symbol is somewhere in the code
            if code_solved:
                print(f'\n{bold}{green}Success! You decyrpted the code and fixed the dropship propulsion.{end}')
                enter()
                return True
            else:
                print("You solved a piece of the code!")
            enter()
        else: # if symbol is not in the code
            print("\nThat symbol is not in the code.")
            lives -= 1
            enter()

        if lives <= 0:
            print("\nYou failed to unlock the controls. The alarm blares.")
            enter()
            return False

# functions for gameplay
def intro(): # get introduced to the game and choose your character
    player = None
    clear()
    print("When the nuclear apocalypse destroyed Earth, groups\nof lucky individuals made it onto 13 space stations\nand shot themselves into space to ensure the survival\nof the human race. 12 space stations joined together\nand were renamed the Ark.")
    t.sleep(2)
    print("\nOn the Ark, every crime is punishable by death unless\nyou are under 18 years old, in which case, you get\nimprisoned in the Sky Box.")
    t.sleep(2)
    print("\n97 years post-apocalypse, you are a prisoner on the Ark.\n")
    t.sleep(2)
    input(f"[{bold}{cyan}Enter{end}] to choose your crime\n")

def choose_crime():
    while True:
        clear()
        print(f"{bold}What was your crime?\n(type in the number that corresponds with each crime to see details)\n{end}")
        draw()
        counter = 1
        for i in crimes:
            print(f"{bold}{cyan}{counter}. {crimes[i]['desc']}\n{end}")
            counter += 1 
        draw()
        crime = input("\n> ").strip().lower()
        
        if crime.isdigit() and 0 <= int(crime) <= len(crimes):
            crime_index = int(crime) - 1 # converting answer into index
            crime_choice = crimes[str(crime_index)]
            print(f"{bold}{crime_choice['title']}{end}")
            print(f"\n{bold}Back | {red}Skills | {orange}Items | {yellow}Implications | {green}Select |{end}")
            while True:
                info = input("\n> ").strip().lower()
                if info in ['skills', 'skill']: # if choose skills
                    print(f"\n{bold}{crime_choice['skills']}{end}")

                elif info in ['items', 'item']: # items
                    print(f"\n{bold}{crime_choice['items']}{end}")
                
                elif info in ['implications', 'imp', 'i']: # implications
                    print(f"\n{bold}{crime_choice['implications']}{end}")
                
                elif info in ['b', 'back', 'x', 'exit', 'l', 'leave']:
                    break

                elif info in ['select', 's']: # if select this character!
                    select = input('\nDid you mean to select this crime?\n> ').strip().lower() # confirming selection
                    
                    if select in ['y', 'yes']: # yes
                        char_name = input("\nWhat is your character's name?\n> ").strip().title()
                        while char_name is "": # if they don't write a name, make them
                            char_name = input('Please enter a name\n\n> ').strip().title()
                        
                        if crime_index == 0: # vital supplies
                            player = Player(char_name, 11, 11, 10, 14, 2, 15, 2, 16, 3, 13, 1, 11, 0, 9, -1, 2, 0, 12, multipurpose_knife, wristband, {})
                            player.add_to_inv(multipurpose_knife, 1)
                            player.add_to_inv(wristband, 1)
                            player.add_to_inv("1 days rations", 3)
                            player.add_to_inv("small waterskin", 1)
                            player.add_to_inv("first aid kit", 1) ### add scenario where you use this
                        
                        elif crime_index == 1: # rebellion leader
                            player = Player(char_name, 12, 12, 10, 16, 3, 14, 2, 15, 2, 9, -1, 11, 0, 13, 1, 2, 0, 12, throwing_knives, wristband, {})
                            player.add_to_inv(throwing_knives, 1)
                            player.add_to_inv(wristband, 1)
                            ### create items for inv
                            player.add_to_inv("radio", 1)
                            player.add_to_inv("government documents", 1)
                            #player.add_to_inv(light_armor) ###??? do you want to add this or something else?
                        
                        elif crime_index == 2: # cannabis thief
                            player = Player(char_name, 10, 10, 10, 13, 1, 14, 2, 15, 2, 11, 0, 16, 3, 9, -1, 2, 0, 12, shiv, wristband, {})
                            player.add_to_inv(shiv, 1)
                            player.add_to_inv(wristband, 1)
                            player.add_to_inv("1 days rations", 2)
                            player.add_to_inv("small waterskin", 1)
                            ### create items for inventory
                            player.add_to_inv("herbs", 1)
                            player.add_to_inv("pipe", 1)

                        elif crime_index == 3: # second child
                            player = Player(char_name, 12, 12, 10, 16, 3, 15, 2, 14, 2, 11, 0, 9, -1, 13, 1, 2, 0, 12, dagger, wristband, {})
                            player.add_to_inv(dagger, 1)
                            player.add_to_inv(wristband, 1)
                            player.add_to_inv("lockpick", 1)
                            ### create items for inv
                            player.add_to_inv(f"forgery kit", 1)
                            player.add_to_inv("dark cloak", 1)
                    
                        elif crime_index == 4: # falsely accused
                            player = Player(char_name, 10, 10, 10, 16, 3, 15, 2, 14, 2, 9, -1, 13, 1, 11, 0, 2, 0, 13, wrench, wristband, {})
                            player.add_to_inv(wrench, 1)
                            player.add_to_inv(wristband, 1)
                            player.add_to_inv("portable device", 1)
                            ### create items for inv
                            player.add_to_inv("toolkit", 1)
                            player.add_to_inv("spare parts", 4)
                            player.add_to_inv("personal journal", 1)

                        return player

                    elif select in ['n', 'no']: # no
                        enter()
                        continue
                    
                    else: # invalid input handling
                        print(f"{red}{bold}Invalid command.\n{green}Valid commands:{white}['yes', 'y'\n'no', 'n']")
                        enter()
                        continue
                else: # invalid input handling
                    print(f"{red}{bold}Invalid command.\n{green}Valid commands:{end}\n['b', 'back', 'x', 'exit', 'l', 'leave'\n'skills', 'skill'\n'items', 'item'\n'implications', 'imp', 'i'\n'select', 's']")
                    enter()
                    break
                    
        else: # invalid input handling
            print(f'{red}{bold}Invalid command.\n{green}Please enter the number that corresponds\nwith the crime your character has committed{end}')
            enter()
            clear()
            continue

def go_to_Earth(): ### write cutscene
    global crime_index
    while True: 
        clear()
        print('Guards suddenly rush into your cell and bark at you, "Let\'s go!"\nThey take you by your arm and drag you down the Ark corridors.')
        #t.sleep(1)
        print('\nYou look around and see that the other prisoners are being\nherded in the same direction, looking terrified.\n')
        #t.sleep(1)
        print('Do you...\na) try to ask the guard where they are taking you\nb) stay quiet')
        speak_up = input("\n> ").strip().lower()
        if speak_up == "a": # if ask where they're taking you
            print(f'{bold}The guard shoots you a menacing expression and grunts at you.')
            t.sleep(1)
            if multipurpose_knife in player.inv: # if crime was stealing vital stuff -- people don't trust you
                print(f'\nYou make eye contact with the prisoner to your left and try to\nnonverbally communicate "What the **** is going on?"\n\nThe prisoner gives you some side-eye.{end}')
                enter()
                break
            elif throwing_knives in player.inv: # if crime: leading a rebellion
                print(f'\nYou exchange a glance with another prisoner, who mouths to you\nin a panic: "They\'re sending us...down.{end}"') ### this NPC was arrested for treason? define who these prisoners are
                enter()
                break
            elif shiv in player.inv: # if crime: cannabis thievery
                print(f'\nYou realize you\'re still a little bit baked from smoking\nthe last of the stash you had hidden in the air ducts in your cell.\n\nYou begin to realize you have no clue what\'s going on.{end}') ### 
                enter()
                break
            elif dagger in player.inv: # if crime: 2nd child
                print(f'\nAnother prisoner tries to get your attention\nand has a panicked look on their face.{end}') ###
                enter()
                break
            elif wrench in player.inv: # if crime: falsely accused
                print(f'\nYou look to your right and see a prisoner nearby\nstruggling to get out of a guard\'s grasp{end}')
                enter()
                break
        elif speak_up == "b": # if you don't
            print(f'The prisoner next to you is yelling "Where are you taking us?!" at one of the Guard members,\nwho maintains a cold and aggressive expression.{end}') ### you observe your surroundings and see worried faces, clues as to what could be happening
            enter()
            break
        else:
            print(f"{red}{bold}Invalid command.{green}\nValid commands:\n{white}['a', 'b']{end}")
            enter()
            clear()
            continue

    # scene: getting to dropship
    clear()
    print('You begin to approach the Boarding Bay. When you get there, you see\nprisoners being pushed into a dropship, strapped into a seat, and\ntagged with a wristband.')
    t.sleep(1)
    print('\nSuddenly, you are being shoved into a seat and a wristband is\nclamped onto your wrist. It pinches a little bit.')
    t.sleep(1)
    print("\nOnce everyone is seated, a video of the Chancellor begins playing. He says:")
    t.sleep(1)
    print(f"\n{bold}{red}\"You are being sent to the ground to see if mankind can\nsurvive there. As you are criminals, we felt you were expendable.\nIf you do survive on Earth, your crimes will be forgiven.\"{end}")
    t.sleep(1)
    print("\nThe dropship doors close.")
    enter()

    # launching dropship
    clear()
    print('LAUNCHING DROPSHIP IN')
    t.sleep(0.5)
    print('3...')
    t.sleep(1)
    print("2...")
    t.sleep(1)
    print("1...")
    t.sleep(1)
    print("\nYou launch into space.")
    t.sleep(1)
    print("\nYour body fills with exhilaration and fear as you hurtle through\nEarth's atmosphere. The anticipation of stepping outside and\nonto the ground makes your heart pound more violently.")
    t.sleep(1)
    
    # dropship malfunction
    print(f"\n{bold}Suddenly, the descent turns into a {red}chaotic freefall.{white} The dropship\nshakes aggressively and you all try to grip anything stable. The\nengine becomes very loud, intesifying the feeling of {orange}imminent\ndanger{white} and helplessness.{end}")
    t.sleep(1)
    while True:
        print("\nDo you...\na) attempt to fix the issue or\nb) brace for impact?")
        fix_or_brace = input("> ").strip().lower()
        dmg_identified = False
        if fix_or_brace in ['a', 'fix', 'fix the issue', 'f']:
            clear()
            
            # assess malfunction
            if "portable device" in player.inv:
                print("\nYou use your device and successfully identify a damaged component in the dropship\'s propulsion system")
                enter()
                dmg_identified = True
            else: # investigation skill check
                print(f"\n{player.name} will use an investigation skill check to assess the malfunction")
                t.sleep(1)
                print("\nRolling d20 and adding your intelligence modifier...")
                t.sleep(1)
                inv_check = diceRoll(20) + player.int_mod
                print(f"\nYou got {inv_check}")
                t.sleep(1)
                if inv_check > 8: # chose 6 as difficulty class for this task, don't want it to be unattainable but not too easy either
                    print("\nYou have successfully identified a damaged component in the dropship's propulsion system.")
                    dmg_identified = True
                    enter()
                else:
                    print("\nYou were unsuccessful and did not figure out the source of the malfunction.\n--> CONSEQUENCES") ### code consequences of failing to do this
                    dmg_identified = False
                    enter()
                    break
        
            while dmg_identified is True: # if you successfully assess damage, move onto code decryption minigame to fix it
                fixed = code_decryption_minigame()
                if fixed is True: #if they were successful
                    print("You successfully fixed the propulsion system!\n--> REWARDS") ### code rewards, what happens (spaceship steadies, safe landing, etc.)
                    enter()
                    return True
                else:
                    print("\nYou were unsuccessful at repairing the propulsion system and brace for impact.\n--> CONSEQUENCES")
                    enter()
                    return False
        
        elif fix_or_brace in ['b', 'brace', 'brace for impact']:
            print('WRITE WHAT HAPPENS IF YOU BRACE') ###
            break
        else:
            print(f"{bold}{red}Invalid command.{green}\nValid commands:\n['a', 'fix', 'fix the issue', 'f',\n'b', 'brace', 'brace for impact']{end}")
            enter()
            clear()
            continue

def go_to_Polis():
    clear()
    print(f"As you approach the imposing gates of {bold}{yellow}Polis{end} a sense of wonder\nand trepidation washes over you.\nThe ancient city stands as a testament to resilience in\na world devastated by nuclear catastrophe.\n")
    input(f"[{cyan}{bold}Enter{end}] to walk through the gates\n")
    inPolis = True
    while inPolis:
        clear()
        print(f"Location: {red}{underline}{bold}Polis{end}\n")
        print("The square is alive with the chatter of Grounders in various outfits,\neach representing their clan. Warriors bearing weapons stride with\nconfidence, while traders and healers offer their wares and services at their\nmarket stalls. Grounder children play among the bustling crowd.\n")
        print(f"{bold}Exit | {gold}Inv {white}| {red}Save {white}| {blue}Stats {white}| {copper}Marketplace{white} | {green}Converse {white}|{end}")
        action = input("> ").strip().lower()
        if action in ['x', 'exit']: # exit
            player.save_game('load.json') # autosave
            print("Goodbye!")
            quit()
        if action in ['i', 'inv', 'inventory']: # inventory
            print_inventory()
        elif action == "save": # save
            player.save_game('load.json') # autosave
        elif action in ['s', 'stats']: # stats
            player.print_stats()
        elif action in ['m', 'marketplace', 'market', 'store']: # marketplace
            # print cutscene of entering marketplace
            go_to_Market() ### MAKE STORE FUNCTION SO YOU CAN HAVE OPTION TO BUY THINGS IN OTHER PLACES TOO
        
        elif action in ['c', 'converse', 'talk']: # converse
            while True:
                clear()
                print(f'You walk towards the center of the square and see\na group of {bold}{yellow}Azgeda Gonas{end} whispering amongst themselves,\nand {bold}{purple}an elderly woman{end} adorned in Fleimkepa robes who\nis sharing wisdom with avid listeners who hang on to her every word.\n\nWho would you like to speak with?\n\n[{bold}{cyan}l{end}] to leave') ### ADD CONVERSATIONS HERE
                response = input('\n> ').strip().lower()
                if response is not None:
                    if response in ['azgeda gonas', 'azgeda', 'a', 'gonas', 'gona', 'g']:
                        if azgeda.currentHP <= 0: azgeda.currentHP = azgeda.HP
                        player.battle(azgeda)### testing
                        enter()
                    elif response in ['woman', 'w', 'elderly woman', 'elder', 'fleimkepa', 'f', 'flamekeeper']:
                        if player.name.lower() == 'fleimkepa':
                            print('You walk closer to the woman and realize it is Luna,\nthe eldest remaining fleimkepa.\n')
                            t.sleep(1)
                            print("\"Young Fleimkepa, it is up to you now to\nprotect both the Fleim and the Heda who bears it.\nMeet me at the Temple so I may give you something.\"")
                            input(f"\n[{bold}{cyan}Enter{end}] to go to the Temple with Luna\n")
                            clear()
                            temple_title = f"{bold}{purple}[The Temple]{end}"
                            print(f"{temple_title:^80}\n")
                            print("The temple is a grand structure, crafted from weathered stone.\nInside, the air is thick with the scent of incense and the light\nof flickering candles. The temple walls depict the ancient histories\nof the past Commanders.\n")
                            t.sleep(3)
                            print(f"At the far end of the temple, Luna is standing by an elevated platform\nupon which rests the Fleim. She beckons to you:\n{bold}{purple}\"I am passing the Fleim on to you. Protect it, and the next Commander,\nwith your life.\"{end}\n\nWill you accept the honor?") ### Add a minigame/test in order to actually be given the Fleim?
                            yes_or_no = input("\n> ").strip().lower()
                            if yes_or_no in ['yes', 'y']:
                                print('She takes the flame, puts it in a black tin, and places it in your open hand.') ### write better narrative and add flame to inventory
                                player.add_to_inv(the_fleim, 1)
                            elif yes_or_no in ['no', 'n']:
                                print('You are no fleimkepa. You are a disgrace to our people.') ### add narrative here
                                enter()
                                break
                            else:
                                print('Please choose yes or no.') ### make a while loop?
                                enter() 
                        else:
                            print('CONVO WITH FLEIMKEPA') ### add conversation non-fleimkepas have with her
                        enter()
                    elif response in ['x', 'exit', 'e', 'leave', 'l']: break
                    else: 
                        print(f"{red}Invalid command.{end}\n{green}Valid commands:{end}\n['azgeda gonas', 'azgeda', 'a', 'gonas', 'gona', 'g',\n'woman', 'w', 'elderly woman', 'elder', 'fleimkepa', 'f', 'flamekeeper',\n'x', 'exit', 'e', 'leave', 'l']")
                        enter()
                else: 
                    print(f"{red}Invalid command.{end}\n{green}Valid commands:{end}\n['trikru gonas', 'trikru', 't', 'gonas', 'gona', 'g',\n'woman', 'w', 'elderly woman', 'elder', 'fleimkepa', 'f', 'flamekeeper',\n'x', 'exit', 'e', 'leave', 'l']")
                    enter()
            
        else: # invalid input
            print(f"{red}{bold}Invalid{end} command.")
            t.sleep(0.5)
            print(f"\n{bold}{green}Valid{end} commands:\n['x', 'exit'\n'i', 'inv', 'inventory'\n's', 'stats'\n'm', 'marketplace', 'market', 'store'\n'c', 'converse', 'talk']")
            enter()
def go_to_Dropship(): ###
    pass
def go_to_MtWeather(): ###
    pass
def go_to_TrikruWoods(): ###
    pass
def go_to_Market(): 
    global in_Marketplace
    in_Marketplace = True
    while in_Marketplace:
        clear()
        print(f"The market stalls are adorned with colorful fabrics and\ngoods from each clan.\nThey offer you their wares as you pass by each stall.\n\n{bold}What kind of goods are you looking for?\n{end}")
        print(f"| {bold}{copper}Shuda {white}(Weapons) | {bold}{purple}Potions{white} | {bold}{blue}Tek{white} (Tek) | {bold}{gray}Leave |{end}")
        shop = input("> ").strip().lower()
        
        if shop in ['s', 'shuda', 'w', 'weapons']: # weapons shop
            while True:
                clear()
                print(f'{bold}{copper}Shuda Kofgeda{end}\n') ### ADD weapons shop
                print(f"{gold}Your Gold Pieces: {player.gp}{end}\n")
                # printing list of weapons
                print(f"{bold}Item\t\t\tPrice{end}\n")
                count = 1
                for w in weapons_for_sale:
                    if len(w.name) <= 12: print(f'{count}. {w.name.title()}\t\t{gold}[{w.price} gp]{end}')
                    else: print(f'{count}. {w.name.title()}\t{gold}[{w.price} gp]{end}')
                    count += 1

                print(f"\n[{bold}{cyan}l{end}] to leave shop")
                w_choice = input("\n> ").strip().lower()
                if not w_choice.isdigit(): # making sure it is a number answer
                    if w_choice in ['l', 'leave', 'e', 'exit', 'x',]:
                        break
                    else:
                        print(f"{red}Invalid input.{end}\nPlease enter the number corresponding\nto the item you want to select.")
                        enter()
                        continue
                
                elif w_choice.isdigit() and int(w_choice) <= len(weapons_for_sale): # if it's a number on the list
                    weapon_index = int(w_choice) - 1 # getting index of item in list
                    weapon_choice = weapons_for_sale[weapon_index] # assigning weapon they chose into value
                    print(f"{weapon_choice.name.title()}\nBuy | Read Desc | Exit")
                    answer = input("\n> ").strip().lower()
                    if answer in ['b', 'buy']:
                        if player.gp >= weapon_choice.price:
                            player.add_to_inv(weapon_choice, 1) # add item to player inventory
                            print(f'{green}>>{weapon_choice.name.title()} added to inventory<<{end}')
                            player.gp -= weapon_choice.price # take money out of account
                            player.save_game('load.json') # autosave after they purchsae a weapon
                            enter()
                            continue
                        else: # if not enough money in account
                            print('You cannot afford this item right now.')
                            enter()
                            continue
                    elif answer in ['r', 'read', 'read desc', 'read description', 'desc']:
                        print(weapon_choice.desc)
                        enter()
                    elif answer in ['e', 'exit', 'x']:
                        continue
                    else: ### doesn't seem to actually handle None answer
                        print("Invalid command. Valid comands: ['b', 'buy'\n'r', 'read', 'read desc', 'read description', 'desc'\n'e', 'exit', 'x']")
                        enter()
                        continue
                else: # if choose a number that is not on list
                    print('Please choose a valid number.')
                    enter()
                    continue
        
        elif shop in ['p', 'potions']:
            while True:
                clear()
                print(f'{bold}{purple}Potions Kofgeda{end}\n')
                print(f"{gold}Your Gold Pieces: {player.gp}{end}\n")
                print(f"{bold}Item\t\t\tPrice{end}\n")
                count = 1
                for p in potions_all:
                    if len(p.name) <= 12: print(f'{count}. {p.name.title()}\t\t{gold}[{p.price} gp]{end}')
                    else: print(f'{count}. {p.name.title()}\t{gold}[{p.price} gp]{end}')
                    count += 1

                print(f"\n[{bold}{cyan}l{end}] to leave shop")
                p_choice = input("\n> ").strip().lower()
                if not p_choice.isdigit():
                    if p_choice in ['l', 'leave', 'e', 'exit', 'x',]: break
                    else:
                        print(f"{red}Invalid input.{end}\nPlease enter the number corresponding\nto the item you want to select.")
                        enter()
                        continue
                
                elif p_choice.isdigit() and int(p_choice) <= len(potions_all):
                    potion_index = int(p_choice) - 1
                    potion_choice = potions_all[potion_index]
                    print(f"{potion_choice.name.title()}\nBuy | Read Desc | Exit")
                    answer = input("\n> ").strip().lower()
                    if answer in ['b', 'buy']:
                        if player.gp >= potion_choice.price:
                            player.add_to_inv(potion_choice, 1)
                            print(f'{green}>>{potion_choice.name.title()} added to inventory<<{end}')
                            player.gp -= potion_choice.price
                            player.save_game('load.json') 
                            enter()
                            continue
                        else: 
                            print('You cannot afford this item.') 
                            continue
                    elif answer in ['r', 'read', 'read desc', 'read description', 'desc']:
                        print(potion_choice.desc)
                        enter()
                    elif answer in ['e', 'exit', 'x', 'l', 'leave']: continue
                    else: 
                        print("Invalid command. Valid comands: ['b', 'buy'\n'r', 'read', 'read desc', 'read description', 'desc'\n'e', 'exit', 'x', 'l', 'leave']")
                        enter()
                        continue
                else: 
                    print('Please choose a valid number.')
                    enter()
                    continue

        elif shop in ['t', 'tek', 'Tek', 'Teknology']:
            while True:
                clear()
                print(f'{bold}{blue}Tek Kofgeda{end}\n') ### ADD Tek shop
                print(f"{gold}Your Gold Pieces: {player.gp}{end}\n")
                print(f"{bold}Item\t\t\tPrice{end}\n")
                count = 1
                for tek in tek_for_sale:
                    if len(tek.name) <= 12: print(f'{count}. {tek.name.title()}\t\t{gold}[{tek.price} gp]{end}')
                    else: print(f'{count}. {tek.name.title()}\t{gold}[{tek.price} gp]{end}')
                    count += 1

                print(f"\n[{bold}{cyan}l{end}] to leave shop")
                tek_choice = input("\n> ").strip().lower()
                if not tek_choice.isdigit():
                    if tek_choice in ['l', 'leave', 'e', 'exit', 'x',]: break
                    else:
                        print(f"{red}Invalid input.{end}\nPlease enter the number corresponding\nto the item you want to select.")
                        enter()
                        continue
                
                elif tek_choice.isdigit() and int(tek_choice) <= len(tek_for_sale):
                    tek_index = int(tek_choice) - 1
                    tek_choice = tek_for_sale[tek_index]
                    print(f"{tek_choice.name.title()}\nBuy | Read Desc | Exit")
                    answer = input("\n> ").strip().lower()
                    if answer in ['b', 'buy']:
                        if player.gp >= tek_choice.price:
                            player.add_to_inv(tek_choice, 1)
                            print(f'{green}>>{tek_choice.name.title()} added to inventory<<{end}')
                            player.gp -= tek_choice.price
                            player.save_game('load.json') 
                            enter()
                            continue
                        else: 
                            print('You cannot afford this item.') 
                            enter()
                            continue
                    elif answer in ['r', 'read', 'read desc', 'read description', 'desc']:
                        print(tek_choice.desc)
                        enter()
                    elif answer in ['e', 'exit', 'x', 'l', 'leave']: continue
                    else: 
                        print("Invalid command. Valid comands: ['b', 'buy'\n'r', 'read', 'read desc', 'read description', 'desc'\n'e', 'exit', 'x', 'l', 'leave']")
                        enter()
                        continue
                else: 
                    print('Please choose a valid number.')
                    enter()
                    continue
                
        elif shop in ['l', 'leave', 'x', 'e', 'exit']:
            in_Marketplace = False
        else:
            print(f"{bold}{red}Invalid{white} command.\n\n{green}Valid{white} commands:\n{end}['s', 'shuda', 'w', 'weapons'\n'p', 'potions'\n't', 'tek', 'Tek', 'Teknology'\n'l', 'leave', 'x', 'e', 'exit'")
            enter()
            continue
def go_to_Deadzone(): ###
    pass
def go_to_Tondc(): ###
    pass
def go_to_ShallowValley(): ###
    pass

# diceroll function (used for attack & damage rolls)
def diceRoll(numOfSides):
  roll = r.randint(1, numOfSides)
  return roll

class NPC:
    num_of_NPCs = 0
    def __init__ (self, name): ###CODE THIS, ADD MORE ATTRIBUTES
        self.name = name

        NPC.num_of_NPCs += 1

class Enemy(): ### ADD CODE: any other attributes that become necessary (strength and dex)
    num_of_enemies = 0
    def __init__ (self, name, armor_class, strength, dex, currentHP, HP, dropItem, dropGP, equipped_weapon=None):
        self.name = name
        self.armor_class = armor_class
        self.strength = strength
        self.dex = dex
        self.currentHP = currentHP
        self.HP = HP
        self.dropItem = dropItem
        self.dropGP = dropGP
        self.equipped_weapon = equipped_weapon
        #self.strength = strength
        #self.dex = dex

        Enemy.num_of_enemies +=1 # keep a count of how many enemies exist

class Weapons: 
    num_of_weapons = 0
    def __init__(self, name, desc, price, finesse, melee, range, num_of_sides):
        self.name = name
        self.desc = desc
        self.price = price
        self.finesse = finesse
        self.melee = melee
        self.range = range
        self.num_of_sides = num_of_sides # which die needs to be rolled for that weapon
    
        Weapons.num_of_weapons += 1

class Potions:
    num_of_potions = 0
    def __init__(self, name, desc, price, effects):
        self.name = name
        self.desc = desc
        self.price = price
        self.effects = effects

        Potions.num_of_potions += 1
    
    def drinkPotion(self, user): # call function when want to drink potion/gain effectss from them
        if self.name == 'knowledge potion':
            print(knowledge_potion.effects)
            user.xp += 15
        elif self.name == 'health potion':
            print(health_potion.effects)
            user.HP += 5
        user.remove_from_inv(self, 1)
        return user.xp, user.HP
    
class Tek(Potions): 
    def __init__(self, name, desc, price, effects):
        super().__init__(name, desc, price, effects)

    def useTek(self, user): ###CODE THIS SO YOU CAN ACTUALLY USE IT IN A SCENARIO AND IT WILL INTERACT WITH RADIATION, ETC.
        if self.name == 'wristband':
            print(f"\nCHANGE THIS TO ACTUALLY AFFECT THINGS:\n{wristband.effects}") ### actually implement something you can do with it
        elif self.name == 'gas mask':
            print(f"\nCHANGE THIS TO ACTUALLY AFFECT THINGS:\n{gas_mask.effects}") ###
        elif self.name == 'the fleim':
            print(f"\nCHANGE THIS TO ACTUALLY AFFECT THINGS:\n{the_fleim.effects}") ###
        elif self.name == 'knockout gas':
            print(f"\nCHANGE THIS TO ACTUALLY AFFECT THINGS:\n{knockout_gas.effects}") ###

    def use_wristband(self):
        pass ### create functionality for radiation alert & turning on night vision, plus any other effectss you may add to it

# weapon objects
glaive = Weapons('glaive', 'This glaive boasts a gleaming obsidian blade with intricate,\nethereal runes etched along its length, set upon a polished, ebony-hued\nshaft adorned with menacing, dragon-shaped pommel.', 20, False, True, False, 10)
rapier = Weapons('rapier', 'This rapier is an elegantly slender and silvered blade,\nits handle intricately adorned with sapphire-encrusted crossguards\nand a hilt of black leather wrapped in silver thread.', 25, False, True, False, 8)
dagger = Weapons('dagger', 'The dagger gleams with a wickedly curved obsidian blade,\na hilt wrapped in midnight-blue leather, and\na pommel adorned with a menacing onyx gemstone.', 2, True, False, False, 4)
crossbow = Weapons('crossbow', 'This crossbow features a sleek, polished mahogany stock adorned\nwith intricate ivory inlays, a glistening steel barrel, and an\nexquisitely carved ebony trigger guard, giving it\nan air of both beauty and deadly precision.', 25, False, False, True, 8)
butterfly_sword = Weapons('butterfly sword', 'The butterfly sword boasts a pair of elegantly slender blades\nwith intricately carved jade hilts, their unique S-shaped guards\ndesigned for fluid, acrobatic combat Tekniques.', 10, True, False, False, 6)
reaper_stick = Weapons('reaper stick', 'WRITE DESCRIPTION', 10, False, True, False, 8)
reaper_cleaver = Weapons('reaper cleaver', 'The Reaper Cleaver is a massive, double-edged greataxe\nwith a rusted and jagged blade, imbued with a menacing aura,\nsuggesting the cruelty of its wielder.', 30, False, True, False, 8)
multipurpose_knife = Weapons('multipurpose knife', 'A compact tool featuring a sharp blade,\nserrated edge, firestarter, bone saw, and an LED flashlight', 50, False, True, False, 6)
throwing_knives = Weapons('throwing knives', 'Set of 5 sleek, lightweight knives balanced for precision,\nmaking them deadly when thrown accurately or used up close.', 10, True, False, False, 4)
shiv = Weapons('shiv', 'A small, sharp blade attached to a handle\nmade from scrap metal', 0, False, True, False, 6)
wrench = Weapons('mechanical wrench blade', 'Combines a a sturdy metal wrench with a retractable, razor-sharp blade\nOriginally designed for enginering repairs, the blade can be extended\nfor use as a melee weapon.', 0, False, True, False, 8)
shortbow = Weapons('shortbow', 'The shortbow\'s silent operation and lightweight design\nmake it an excellent choice for individuals relying on stealth\nand precision in their encounters', 25, False, False, True, 6)
weapons_all = [glaive, rapier, dagger, crossbow, butterfly_sword, reaper_stick, reaper_cleaver, multipurpose_knife, throwing_knives, shiv, wrench, shortbow]
weapons_for_sale = [glaive, rapier, dagger, crossbow, butterfly_sword, reaper_stick, reaper_cleaver, multipurpose_knife, throwing_knives, shortbow]

# list of all potions
health_potion = Potions('health potion', 'A glimmering green liquid', 3, "You ingest the green potion and gain 5 health")
knowledge_potion = Potions('knowledge potion', 'A swirling pearl potion which helps you gain knowledge', 5, "You drink the potion and gain 15 XP")
potions_all = [health_potion, knowledge_potion]

# tek objects
wristband = Tek('wristband', 'These wristbands came with the original 102 to the ground.\nThey were used to measure their vital signs and to\ncommunicate with those still on the Ark.', 50, 'This helpful wristband will give you radiation alerts and night-vision.')
gas_mask = Tek('gas mask', 'A gas mask is crucial in a radiation-struck world.\nIt filters out knockout gas and other toxic pollutants.', 35, 'Renders the wearer immune to knockout gas\nand less susceptible to radiation and Earth\'s toxic air')
knockout_gas = Tek('vial of knockout gas','Knockout gas is used by the mountain men.\nIt is a potent chemical agent which, like\nthe name says, knocks out whoever inhales it.', 50, 'Everyone within a 10mi radius') ### change radius it affects?
the_fleim = Tek('the fleim', 'The Fleim, a sacred artifact, embodies the collective wisdom and\nspirits of past Commanders, guiding us with their knowledge and insight.', 3000, 'A natblida who wins the conclave must take the Fleim and\nrecite the lineage in order to ascend as Commander.\nThe Fleimkepa acts as protecter of the Fleim and of the Commander.')
tek_for_sale = [wristband, gas_mask, knockout_gas]
tek_all = [wristband, gas_mask, the_fleim, knockout_gas]

# enemy objects
### THINK ABOUT adding these attributes to Enemy: list of different attack options, 4 options for damage they can do to player (either damage can be randomly chosen or we give them str/dex modifiers for it), death (a string with how each enemy dies)
reaper = Enemy('reaper', 12, 1, 1, 15, 15, reaper_stick, 3, dagger)
azgeda = Enemy('azgeda warrior', 10, 1, 1, 10, 10, butterfly_sword, 5, rapier)
mountain_man = Enemy('mountain man', 18, 1, 2, 15, 18, knockout_gas, 10, crossbow)

random_enemy_list = [reaper, azgeda] # list of enemies that randomly spawn
random_enemy = r.choice(random_enemy_list) 
enemies_all = [reaper, azgeda, mountain_man]

## RUN GAME ##
while run:
    while mainMenu: # in main menu
        clear()
        draw()
        print("1. New Game\n2. Load Game\n3. Quit game") # menu options
        draw()
        choice = input("> ").strip().lower() # choice
        if choice in ['1', 'n', 'new', 'new game']: # new game
            intro() # play intro cutscene --> commented out right now for playtesting speed
            player = choose_crime() # choose crime and return player object based on their choice
            if player is not None: 
                print(f"\n{bold}>>{player.name} created<<{end}")
                t.sleep(0.5)
                mainMenu = False
                play = True
            else:
                print("Invalid character selection. Please try again.")
                enter()
                mainMenu = True
        
        elif choice in ['2', 'l', 'load', 'load game']: # load game
            player = Player.load_game('load.json') # assign loaded player
            if player is not None:
                player = player
                print(f"Welcome back, {player.name}")
                enter()
                mainMenu = False
                play = True
            else:
                print("Corrupt save file or no file found!")
                enter()
                mainMenu = True
                play = False

        elif choice in ['3', 'q', 'quit', 'quit game', 'x']: # quit game
            quit = input("\nAre you sure you want to quit the game (y/n)?\n> ").strip().lower()
            if quit == "y":
                clear()
                print("Goodbye!")
                exit()

        else: # if enter wrong thing
            print(f"{bold}{red}Invalid{white} command.\n{green}Valid{white} commands:{end}\n['1', 'n', 'new', 'new game'\n'2', 'l', 'load', 'load game'\n'3', 'q', 'quit', 'quit game', 'x']")
            enter()
            continue

    while play:
        player.save_game('load.json') # autosave
        go_to_Earth()
        go_to_Polis()

## BUGS
'''
1.  When you load a saved game, the inventory functionality stops working. 
    It won't let you select an inventory item. When you buy something at market, 
    it also does not increase quantity of items if you already have one in your inventory. 
    It adds a whole new item. This may give some insight onto why it isn't loading properly? 
    It is seeing these as strinsg and not objects perhaps?
    --> Perhaps an issue with how the data is saved/loaded into the game?
2. If you are choosing your crime and you choose '0', it will crash
'''

## Notes as of 10/15/2023
'''
Ideas to build on:
1. Considering making this a 2d game instead of text based as an opportunity to expand my skillset further.
   Going to learn pygame and then decide if it is the right move for this game. --> so far, i don't think it 
   is unless i want to make all original artwork
2. Will likely add radiation levels to the game so there may be waves of radiation which could affect order of events. 
   I.e., there is a wave of radiation and you need to use some resources to survive that. (could also have mountain men 
   ambush with acid fog/knock-out gas)

NEXT STEPS:
1. Add ability to actually use tek in a scenario where it can help and complete everything else with the "###"
2. Break game up into multiple documents so the code isn't so long?
3. If you make this game linear, instead of having shops in one specific location, maybe the user runs into merchants on the way to other things
4. Consider adding book items like an herbalist guide
6. Create dictionary of inventory items that you currently have (with descriptions, uses, prices if they can be sold) to cut a lot of code from print_inventory()
7. Implement ability checks and uses for each stat/modifier in battle + in general
8. Add market stall that sells water, food, etc. 

Changes made since last github update:
1. Changed stats page to reflect all of the ability scores & modifiers
2. Code Decryption Minigame to fix dropship propulsion now updates the display if you get one symbol 
   right instead of making you guess the exact sequence all at once
3. In the section where you choose what crime your character committed, the UI now says the title of whichever 
   crime you selected before it presents the options to see more details about the crimes. I also added colors to those options.
4. Moved crimes dictionary to a separte python file and began to write a dictionary for items such as 1 days rations, the 
   small waterskin, etc. so I can shorten the print_inventory() method in the Player class.
'''
