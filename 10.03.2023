## The 100 RPG Game 
## Making classes for player, NPCs, weapons, potions  ##

import random as r, os, pickle, time as t

# default booleans
run = True # game is running
mainMenu = True # on main menu
play = False # playing game

# booleans for locations
in_Dropship = False
in_MtWeather = False
in_Polis = False
in_TrikruWoods = False
in_Deadzone = False
in_ShallowValley = False
in_Tondc = False
in_Marketplace = False

# colors
bold = "\033[1m"
normal = "\x1b[0m" + "\x1b[38;2;255;255;255m"
italic = "\033[3m"
underline = "\033[4m"
strike = "\033[9m" # strikethrough
end = "\033[0m" # end any formatting
gold = "\x1b[38;2;230;190;0m\x1b[1m"
silver = "\x1b[38;2;221;221;221m\x1b[1m"
copper = "\x1b[38;2;170;44;0m\x1b[1m"
red = "\033[31m"
orange = '\x1b[38;2;255;90;0m\x1b[1m'
yellow = "\033[33m"
green = "\033[32m"
blue =  "\033[34m"
purple = "\033[35m"
cyan = "\033[36m"
white = "\033[37m"
gray = "\033[1;30m"

# formatting
def Title(): # print out game header
    title = "The 100 Role Player Game"
    Title = f"{italic}{bold}{green}{title:^80}{end}"
    author = f"{purple}by @RaiBread{end}"
    print(Title)
    print(f"{author:^90}\n")
def clear():
    os.system("clear")
    os.system("clear")
    Title()
def enter():
    input(f"\n[{bold}{cyan}Enter{end}] to continue\n")
def draw():
    print(f"{strike}Xx         xOx        xX{end}")

class Player:
    def __init__(self, name, currentHP, maxHP, gp, strength, dex, xp, AC, equipped_weapon=None, equipped_tek=None, inv=None):
        self.name = name
        self.currentHP = currentHP
        self.maxHP = maxHP
        self.gp = gp
        self.strength = strength
        self.dex = dex
        self.xp = xp
        self.AC = AC
        self.equipped_weapon = equipped_weapon
        self.equipped_tek = equipped_tek
        if inv is None: # doing this so we don't have a mutable list set as the default
            self.inv = {}
        else:
            self.inv = inv

    def add_to_inv(self, item, quantity):
        if item in self.inv: # if already have this item
            self.inv[item] += quantity # add quantity of it to existing quantity
        else: # if new item
            self.inv[item] = quantity # create new entry in inventory

    def remove_from_inv(self, item, quantity):
        if item in self.inv:
            if self.inv[item] >= quantity: 
                self.inv[item] -= quantity
                if self.inv[item] == 0:
                    del self.inv[item] # remove entry if quantity reaches 0
            else:
                print(f"You don't have enough {item.name} in your inventory")
        else:
            print(f"You don't have {item.name} in your inventory")

    def equip_weapon(self, selected_weapon):
        found_weapon = None

        for weapon in weapons_all:
            if weapon == selected_weapon:
                found_weapon = weapon
                break
        
        if found_weapon:
            self.equipped_weapon = found_weapon
            print(f"{green}>>{found_weapon.name} equipped<<{end}")
            t.sleep(0.5)
        else:
            print(f"You don't have {selected_weapon} in your inventory.")
            enter()

    def equip_tek(self, selected_tek):
        found_tek = None

        for tek in tek_all:
            if tek == selected_tek:
                found_tek = tek
                break
        
        if found_tek:
            self.equipped_tek = found_tek
            print(f"{green}>>{found_tek.name} equipped<<{end}")
            t.sleep(0.5)
        else:
            print(f"You don't have {selected_tek} in your inventory.")
            enter()

    def battle(self, target): ### add option to go to inventory in each round of battle, add round numbers and actually design the battle UI
        round = 1
        while target.currentHP > 0: # battle loop
            global print_battle_title
            bt = f"{bold}{red}xX  Time to Battle  Xx{end}" # title
            print("\nAttack | Use Item")
            attack_or_inv = input("> ").strip().lower()

            if attack_or_inv is not None:
                if attack_or_inv in ['a', 'attack']: # if choose attack
                    if self.equipped_weapon is not None:
                        if self.equipped_weapon.finesse == True: # if finesse weapon, choice of str or dex
                                strength_or_dex = input(f"Do you want to use your Strength ({self.strength}) or Dexterity ({self.dex}) modifier?\n> ").strip().lower()
                    else: 
                        print('You need to equip a weapon before you battle')
                        break
                    
                    # print battle screen and round number
                    def print_battle_title():
                        clear()
                        pr = f"{bold}Round {round}{end}"
                        print(f"{bt:^90}") # print battle screen
                        print(f"{pr:^90}") # round number
                        print(f"\n{bold}{purple}{player.name.title()}{end}: {player.currentHP}/{player.maxHP} HP ðŸ©¸\n{bold}{yellow}{target.name.title()}{end}: {target.currentHP} /{target.HP} HP ðŸ©¸")

                    # your move
                    print()
                    draw()
                    t.sleep(1)
                    if self.equipped_weapon.melee == True or (self.equipped_weapon.finesse == True and strength_or_dex in ['s', 'strength', 'str']): # if choose strength or have to use strength bc melee weapon
                        attack_roll = diceRoll(20) + self.strength
                        if attack_roll >= target.armor_class: # if attack roll successful, on to do damage
                            damage_roll = diceRoll(self.equipped_weapon.num_of_sides) + self.strength
                            target.currentHP -= damage_roll
                            print(f'{bold}You were adept with your {self.equipped_weapon.name} and dealt the {target.name} {damage_roll} damage!{end}')
                        else: 
                            print(f"{bold}You miss them and deal no damage.{end}")
                    
                    elif self.equipped_weapon.range == True or (self.equipped_weapon.finesse == True and strength_or_dex in ['d', 'dex', 'dexterity']): # if choose dex or need to use dex because range weapon
                        attack_roll = diceRoll(20) + self.dex
                        if attack_roll >= target.armor_class: # if attack roll successful, on to do damage
                            damage_roll = diceRoll(self.equipped_weapon.num_of_sides) + self.dex
                            target.currentHP -= damage_roll
                            print(f'{bold}You were adept with your {self.equipped_weapon.name} and dealt the {target.name} {damage_roll} damage!{end}')
                        else: 
                            print(f"{bold}You miss them and deal no damage.{end}")
                
                    else:
                        print(f"{bold}{red}Invalid{end} command.\n\n{bold}{green}Valid{end} commands:\n's', 'strength', 'str'\n'd', 'dex', 'dexterity'")
                        continue
                elif attack_or_inv in ['use item', 'item', 'inv', 'i', 'u']: # if want to use an item
                    print_inventory()
                    print_battle_title()
                    draw()
                    print(f"{bold}You used an inventory item as your turn.{end}")
                else:
                    print(f"{red}{bold}Invalid command.\n{green}Valid commands:{end}\n['a', 'attack'\n'use item', 'item', 'inv', 'i', 'u']")
                    t.sleep(1)
                    print_battle_title()
                    continue
            else:
                    print(f"{red}{bold}Invalid command.\n{green}Valid commands:{end}\n['a', 'attack'\n'use item', 'item', 'inv', 'i', 'u']")
                    t.sleep(1)
                    print_battle_title()
                    continue
            
            # if kill enemy
            if target.currentHP <= 0: # if enemy dies
                draw()
                t.sleep(1)
                print(f"\nYou have defeated the {target.name}!\n\nThey dropped a {bold}{copper}{target.dropItem.name}{end} and {gold}{target.dropGP} gp{end}")
                self.add_to_inv(target.dropItem, 1)
                self.gp += target.dropGP
                self.xp += 30
                return self.inv, self.gp, self.xp

            # enemy's move
            t.sleep(1)
            if target.equipped_weapon.melee == True or target.equipped_weapon.finesse == True:
                tattack_roll = diceRoll(20) + target.strength
                if tattack_roll >= self.AC: # if attack roll successful, on to do damage
                    tdamage_roll = diceRoll(target.equipped_weapon.num_of_sides) + target.strength
                    self.currentHP -= tdamage_roll
                    print(f'\n{bold}The {target.name} dealt you {tdamage_roll} damage{end}')
                else: 
                    print(f'\n{bold}The {target.name} missed you and dealt no damage!{end}')
            
            elif target.equipped_weapon.range == True:
                tattack_roll = diceRoll(20) + target.dex
                if tattack_roll >= self.AC: # if attack roll successful, on to do damage
                    tdamage_roll = diceRoll(target.equipped_weapon.num_of_sides) + target.dex
                    self.currentHP -= tdamage_roll
                    print(f'\n{bold}The {target.name} dealt you {tdamage_roll} damage{end}')
                else: 
                    print(f'{bold}The {target.name} missed you and dealt no damage!{end}')
            draw()

            # if enemy kills player
            if self.currentHP <= 0:
                t.sleep(1)
                print('\nYu gonplei ste odon.\nMay we meet again.')
                quit()
            
            # if nobody dies
            if self.currentHP > 0 and target.currentHP > 0:
                
                t.sleep(1)
                print(f"\nYou have both survived round {round}! ðŸŽ‰")
                round += 1
                t.sleep(1)
                enter()
                print_battle_title()
                

    def print_stats(self):
        clear()
        print(f"{bold}{underline}{self.name}{end}")
        print(f"\n{green}{bold}Health{end} | {self.currentHP}/{self.maxHP} ðŸ©¸\n{gold}Gold{end} | {self.gp}\n\n{red}{bold}Strength {end}| {self.strength}\n{purple}{bold}Dexterity{end} | {self.dex}\n{blue}{bold}XP {end}| {self.xp}")
        enter()

    def save_game(self, filename):
        with open(filename, "wb") as file:
            pickle.dump(self, file)

    @staticmethod
    def load_game(filename): ### FIX: There is a problem when loading from a new game, doesn't recognize player
        try:
            with open(filename, "rb") as file:
                loaded_player = pickle.load(file)
                return loaded_player
        except FileNotFoundError:
            return None

def print_inventory(): ### ADD: have it also print the quantity of each item in inventory
    while True:
        clear()
        print(f"{bold}{underline}{player.name}{end}")
        print(f"\n{green}Health{end}: {player.currentHP}/{player.maxHP} ðŸ©¸") # printing health
        print(f"{gold}Gold{end}: {player.gp}")
        if player.equipped_weapon is not None:
            print(f"\n{bold}Equipped Weapon:{end} {(player.equipped_weapon.name).title()}")
        else:
            print(f"\n{bold}Equipped Weapon:{end} {player.equipped_weapon}")
        
        if player.equipped_tek is not None:
            print(f"{bold}Equipped Tek:{end} {player.equipped_tek.name.title()}\n")
        else:
            print(f"{bold}Equipped Tek:{end} {player.equipped_tek}\n")
            
        print(f"\n{bold}{purple}Inventory:\n{end}")
        
        draw()
        counter = 1
        for item, quantity in player.inv.items(): # print inventory
            print(f"{purple}{counter}.{white} ", *item.name.title(), f" x {quantity}", sep = "", end = "\n")
            counter += 1
        draw()

        # inventory choices
        print(f"\n[{cyan}{bold}l{end}] to leave")
        choice = input("> ").strip().lower()
        if choice in ['l', 'leave', 'x', 'exit']: # leave
            break
        elif choice.isdigit():
            item_index = int(choice) - 1 # converting choice into an index of the inventory
            if 0 <= item_index <len(player.inv): # check whether item_index is in valid range of indices for inventory
                selected_item = list(player.inv.keys())[item_index] # assigning selected_item to item in inventory
                
                for potion in potions_all: # if potion
                    if selected_item == potion: 
                        while True:
                            print(f"\n{selected_item.name.title()}\nWhat would you like to do?\n| Sell | Exit | Use | Desc")
                            option = input("\n> ").strip().lower()
                            if option in ['s', 'sell']: # sell
                                player.remove_from_inv(selected_item, 1)
                                print(f"{gold}>> {selected_item.name} sold for {selected_item.price} gp <<{end}")
                                player.gp += selected_item.price
                                enter()
                                break
                            elif option in ['x', 'exit']: # exit
                                break
                            elif option in ['u', 'use', 'equip', 'e']: # use
                                selected_item = potion
                                selected_item.drinkPotion(player)
                                enter()
                                break
                            elif option in ['d', 'desc', 'description']: # description
                                selected_item = potion
                                print(selected_item.desc)
                                enter()
                                break
                            else:
                                print(f"{red}Invalid{end} Command\n\n{green}Valid{end} Commands:\n['s', 'sell'\n'x', 'exit'\n'u', 'use', 'equip', 'e',\n'd', 'desc', 'description']")
                                enter()

                for weapon in weapons_all: # if weapon
                    if selected_item == weapon: 
                        while True:
                            print(f"\n{selected_item.name.title()}\nWhat would you like to do?\n| Sell | Exit | Equip | Desc")
                            option = input("\n> ").strip().lower()
                            if option in ['s', 'sell']: # sell
                                player.remove_from_inv(selected_item, 1)
                                print(f"{gold}>> {selected_item.name} sold for {selected_item.price} gp <<{end}")
                                player.gp += selected_item.price
                                if selected_item == player.equipped_weapon:
                                    player.equipped_weapon = None
                                enter()
                                break
                            elif option in ['x', 'exit']: # exit
                                break
                            elif option in ['e', 'equip', 'u', 'use']: # equip
                                selected_item = weapon
                                player.equip_weapon(selected_item)
                                break
                            elif option in ['d', 'desc', 'description']: # description
                                selected_item = weapon
                                print(selected_item.desc)
                                enter()
                                break
                            else:
                                print(f"{red}Invalid{end} Command\n\n{green}Valid{end} Commands:\n['s', 'sell'\n'x', 'exit'\n'e', 'equip', 'u', 'use'\n'd', 'desc', 'description']")
                                enter()
                                continue
                
                for tek in tek_all: # if tek
                    if selected_item == tek:
                        while True:
                            print(f"\n{selected_item.name.title()}\nWhat would you like to do?\n| Sell | Exit | Equip | Use | Desc")
                            option = input("\n> ").strip().lower()
                            if option in ['s', 'sell']: # sell
                                player.remove_from_inv(selected_item, 1)
                                print(f"{gold}>> {selected_item.name} sold for {selected_item.price} gp <<{end}")
                                player.gp += selected_item.price
                                if selected_item == player.equipped_weapon:
                                    player.equipped_weapon = None
                                enter()
                                break
                            elif option in ['x', 'exit']: # exit
                                break
                            elif option in ['e', 'equip']: # equip
                                selected_item = tek
                                player.equip_tek(selected_item)
                                break
                            elif option in ['u', 'use']: # use item against another
                                selected_item.useTek(player) ### CODE the useTek function
                                enter()
                                break
                            elif option in ['d', 'desc', 'description']: # description
                                selected_item = tek
                                print(selected_item.desc)
                                enter()
                                break
                            else:
                                print(f"{red}Invalid{end} Command\n\n{green}Valid{end} Commands:\n['s', 'sell',\n'x', 'exit',\n'e', 'equip', 'u', 'use',\n'd', 'desc', 'description']")
                                enter()
                                continue
        else:
            print(f"{bold}{red}Invalid{end} command.\n{bold}{green}Valid{end} commands:{end}\n['l', 'leave', 'x', 'exit'\nor the corresponding number to the inventory item you want to select]")
            enter()

# functions for gameplay
def choose_fighter():
    clear()
    print("\nChoose your class:\n")
    draw()
    print(f"[{bold}{red}Jaka {normal}(Thief){end}\t\t\t\tGood strength       |  Excellent dexterity  |  Dagger")
    print(f"[{bold}{yellow}Wanheda {normal}(Commander of Death){end}\t\tExcellent strength  |  Ok dexterity         |  Rapier")
    print(f"[{bold}{cyan}Fleimkepa {normal}(Flamekeeper){end}\t\tGood strength       |  Excellent dexterity  |  Glaive")
    print(f"[{bold}{purple}Natblida Gona {normal}(Nightblood Warrior){end}\tExcellent strength  |  Good dexterity       |  Crossbow")
    draw()
def go_to_Polis():
    clear()
    print(f"As you approach the imposing gates of {bold}{yellow}Polis{end} a sense of wonder\nand trepidation washes over you.\nThe ancient city stands as a testament to resilience in\na world devastated by nuclear catastrophe.\n")
    input(f"[{cyan}{bold}Enter{end}] to walk through the gates\n")
    inPolis = True
    while inPolis:
        clear()
        print(f"Location: {red}{underline}{bold}Polis{end}\n")
        print("The square is alive with the chatter of Grounders in various outfits,\neach representing their clan. Warriors bearing weapons stride with\nconfidence, while traders and healers offer their wares and services at their\nmarket stalls. Grounder children play among the bustling crowd.\n")
        print(f"{bold}Exit | {gold}Inv {white}| {red}Save {white}| {blue}Stats {white}| {copper}Marketplace{white} | {green}Converse {white}|{end}")
        action = input("> ").strip().lower()
        if action in ['x', 'exit']: # exit
            player.save_game('load.json') # autosave
            print(f"{green}>>saved<<{end}")
            print("Goodbye!")
            quit()
        if action in ['i', 'inv', 'inventory']: # inventory
            print_inventory()
        elif action == "save": # save
            player.save_game('load.json') # autosave
            print(f"{green}>>saved<<")
            t.sleep(0.5)
        elif action in ['s', 'stats']: # stats
            player.print_stats()
        elif action in ['m', 'marketplace', 'market', 'store']: # marketplace
            # print cutscene of entering marketplace
            go_to_Market() ### MAKE STORE FUNCTION SO YOU CAN HAVE OPTION TO BUY THINGS IN OTHER PLACES TOO
        
        elif action in ['c', 'converse', 'talk']: # converse
            while True:
                clear()
                print(f'You walk towards the center of the square and see\na group of {bold}{yellow}Azgeda Gonas{end} whispering amongst themselves,\nand {bold}{purple}an elderly woman{end} adorned in Fleimkepa robes who\nis sharing wisdom with avid listeners who hang on to her every word.\n\nWho would you like to speak with?\n\n[{bold}{cyan}l{end}] to leave') ### ADD CONVERSATIONS HERE
                response = input('\n> ').strip().lower()
                if response is not None:
                    if response in ['azgeda gonas', 'azgeda', 'a', 'gonas', 'gona', 'g']:
                        if azgeda.currentHP <= 0: azgeda.currentHP = 20
                        player.battle(azgeda)### testing
                        enter()
                    elif response in ['woman', 'w', 'elderly woman', 'elder', 'fleimkepa', 'f', 'flamekeeper']:
                        if player.name.lower() == 'fleimkepa':
                            print('You walk closer to the woman and realize it is Luna,\nthe eldest remaining fleimkepa.\n')
                            t.sleep(1)
                            print("\"Young Fleimkepa, it is up to you now to\nprotect both the Fleim and the Heda who bears it.\nMeet me at the Temple so I may give you something.\"")
                            input(f"\n[{bold}{cyan}Enter{end}] to go to the Temple with Luna\n")
                            clear()
                            temple_title = f"{bold}{purple}[The Temple]{end}"
                            print(f"{temple_title:^80}\n")
                            print("The temple is a grand structure, crafted from weathered stone.\nInside, the air is thick with the scent of incense and the light\nof flickering candles. The temple walls depict the ancient histories\nof the past Commanders.\n")
                            t.sleep(3)
                            print(f"At the far end of the temple, Luna is standing by an elevated platform\nupon which rests the Fleim. She beckons to you:\n{bold}{purple}\"I am passing the Fleim on to you. Protect it, and the next Commander,\nwith your life.\"{end}\n\nWill you accept the honor?") ### Add a minigame/test in order to actually be given the Fleim?
                            yes_or_no = input("\n> ").strip().lower()
                            if yes_or_no in ['yes', 'y']:
                                print('She takes the flame, puts it in a black tin, and places it in your open hand.') ### write better narrative and add flame to inventory
                                player.add_to_inv(the_fleim, 1)
                            elif yes_or_no in ['no', 'n']:
                                print('You are no fleimkepa. You are a disgrace to our people.') ### add narrative here
                                enter()
                                break
                            else:
                                print('Please choose yes or no.') ### make a while loop?
                                enter() 
                        else:
                            print('CONVO WITH FLEIMKEPA') ### add conversation non-fleimkepas have with her
                        enter()
                    elif response in ['x', 'exit', 'e', 'leave', 'l']: break
                    else: 
                        print(f"{red}Invalid command.{end}\n{green}Valid commands:{end}\n['azgeda gonas', 'azgeda', 'a', 'gonas', 'gona', 'g',\n'woman', 'w', 'elderly woman', 'elder', 'fleimkepa', 'f', 'flamekeeper',\n'x', 'exit', 'e', 'leave', 'l']")
                        enter()
                else: 
                    print(f"{red}Invalid command.{end}\n{green}Valid commands:{end}\n['trikru gonas', 'trikru', 't', 'gonas', 'gona', 'g',\n'woman', 'w', 'elderly woman', 'elder', 'fleimkepa', 'f', 'flamekeeper',\n'x', 'exit', 'e', 'leave', 'l']")
                    enter()
            
        else: # invalid input
            print(f"{red}{bold}Invalid{end} command.")
            t.sleep(0.5)
            print(f"\n{bold}{green}Valid{end} commands:\n['x', 'exit'\n'i', 'inv', 'inventory'\n's', 'stats'\n'm', 'marketplace', 'market', 'store'\n'c', 'converse', 'talk']")
            enter()
def go_to_Dropship(): ###
    pass
def go_to_MtWeather(): ###
    pass
def go_to_TrikruWoods(): ###
    pass
def go_to_Market(): 
    global in_Marketplace
    in_Marketplace = True
    while in_Marketplace:
        clear()
        print(f"The market stalls are adorned with colorful fabrics and\ngoods from each clan.\nThey offer you their wares as you pass by each stall.\n\n{bold}What kind of goods are you looking for?\n{end}")
        print(f"| {bold}{copper}Shuda {white}(Weapons) | {bold}{purple}Potions{white} | {bold}{blue}Tek{white} (Tek) | {bold}{gray}Leave |{end}")
        shop = input("> ").strip().lower()
        
        if shop in ['s', 'shuda', 'w', 'weapons']: # weapons shop
            while True:
                clear()
                print(f'{bold}{copper}Shuda Kofgeda{end}\n') ### ADD weapons shop
                print(f"{gold}Your Gold Pieces: {player.gp}{end}\n")
                # printing list of weapons
                print(f"{bold}Item\t\t\tPrice{end}\n")
                count = 1
                for w in weapons_all:
                    if len(w.name) <= 12: print(f'{count}. {w.name.title()}\t\t{gold}[{w.price} gp]{end}')
                    else: print(f'{count}. {w.name.title()}\t{gold}[{w.price} gp]{end}')
                    count += 1

                print(f"\n[{bold}{cyan}l{end}] to leave shop")
                w_choice = input("\n> ").strip().lower()
                if not w_choice.isdigit(): # making sure it is a number answer
                    if w_choice in ['l', 'leave', 'e', 'exit', 'x',]:
                        break
                    else:
                        print(f"{red}Invalid input.{end}\nPlease enter the number corresponding\nto the item you want to select.")
                        enter()
                        continue
                
                elif w_choice.isdigit() and int(w_choice) <= len(weapons_all): # if it's a number on the list
                    weapon_index = int(w_choice) - 1 # getting index of item in list
                    weapon_choice = weapons_all[weapon_index] # assigning weapon they chose into value
                    print(f"{weapon_choice.name.title()}\nBuy | Read Desc | Exit")
                    answer = input("\n> ").strip().lower()
                    if answer in ['b', 'buy']:
                        if player.gp >= weapon_choice.price:
                            player.add_to_inv(weapon_choice, 1) # add item to player inventory
                            print(f'{green}>>{weapon_choice.name.title()} added to inventory<<{end}')
                            player.gp -= weapon_choice.price # take money out of account
                            player.save_game('load.json') # autosave after they purchsae a weapon
                            enter()
                            continue
                        else: # if not enough money in account
                            print('You cannot afford this item right now.')
                            enter()
                            continue
                    elif answer in ['r', 'read', 'read desc', 'read description', 'desc']:
                        print(weapon_choice.desc)
                        enter()
                    elif answer in ['e', 'exit', 'x']:
                        continue
                    else: ### doesn't seem to actually handle None answer
                        print("Invalid command. Valid comands: ['b', 'buy'\n'r', 'read', 'read desc', 'read description', 'desc'\n'e', 'exit', 'x']")
                        enter()
                        continue
                else: # if choose a number that is not on list
                    print('Please choose a valid number.')
                    enter()
                    continue
        
        elif shop in ['p', 'potions']:
            while True:
                clear()
                print(f'{bold}{purple}Potions Kofgeda{end}\n')
                print(f"{gold}Your Gold Pieces: {player.gp}{end}\n")
                print(f"{bold}Item\t\t\tPrice{end}\n")
                count = 1
                for p in potions_all:
                    if len(p.name) <= 12: print(f'{count}. {p.name.title()}\t\t{gold}[{p.price} gp]{end}')
                    else: print(f'{count}. {p.name.title()}\t{gold}[{p.price} gp]{end}')
                    count += 1

                print(f"\n[{bold}{cyan}l{end}] to leave shop")
                p_choice = input("\n> ").strip().lower()
                if not p_choice.isdigit():
                    if p_choice in ['l', 'leave', 'e', 'exit', 'x',]: break
                    else:
                        print(f"{red}Invalid input.{end}\nPlease enter the number corresponding\nto the item you want to select.")
                        enter()
                        continue
                
                elif p_choice.isdigit() and int(p_choice) <= len(potions_all):
                    potion_index = int(p_choice) - 1
                    potion_choice = potions_all[potion_index]
                    print(f"{potion_choice.name.title()}\nBuy | Read Desc | Exit")
                    answer = input("\n> ").strip().lower()
                    if answer in ['b', 'buy']:
                        if player.gp >= potion_choice.price:
                            player.add_to_inv(potion_choice, 1)
                            print(f'{green}>>{potion_choice.name.title()} added to inventory<<{end}')
                            player.gp -= potion_choice.price
                            player.save_game('load.json') 
                            enter()
                            continue
                        else: 
                            print('You cannot afford this item.') 
                            continue
                    elif answer in ['r', 'read', 'read desc', 'read description', 'desc']:
                        print(potion_choice.desc)
                        enter()
                    elif answer in ['e', 'exit', 'x', 'l', 'leave']: continue
                    else: 
                        print("Invalid command. Valid comands: ['b', 'buy'\n'r', 'read', 'read desc', 'read description', 'desc'\n'e', 'exit', 'x', 'l', 'leave']")
                        enter()
                        continue
                else: 
                    print('Please choose a valid number.')
                    enter()
                    continue

        elif shop in ['t', 'tek', 'Tek', 'Teknology']:
            while True:
                clear()
                print(f'{bold}{blue}Tek Kofgeda{end}\n') ### ADD Tek shop
                print(f"{gold}Your Gold Pieces: {player.gp}{end}\n")
                print(f"{bold}Item\t\t\tPrice{end}\n")
                count = 1
                for tek in tek_for_sale:
                    if len(tek.name) <= 12: print(f'{count}. {tek.name.title()}\t\t{gold}[{tek.price} gp]{end}')
                    else: print(f'{count}. {tek.name.title()}\t{gold}[{tek.price} gp]{end}')
                    count += 1

                print(f"\n[{bold}{cyan}l{end}] to leave shop")
                tek_choice = input("\n> ").strip().lower()
                if not tek_choice.isdigit():
                    if tek_choice in ['l', 'leave', 'e', 'exit', 'x',]: break
                    else:
                        print(f"{red}Invalid input.{end}\nPlease enter the number corresponding\nto the item you want to select.")
                        enter()
                        continue
                
                elif tek_choice.isdigit() and int(tek_choice) <= len(tek_for_sale):
                    tek_index = int(tek_choice) - 1
                    tek_choice = tek_for_sale[tek_index]
                    print(f"{tek_choice.name.title()}\nBuy | Read Desc | Exit")
                    answer = input("\n> ").strip().lower()
                    if answer in ['b', 'buy']:
                        if player.gp >= tek_choice.price:
                            player.add_to_inv(tek_choice, 1)
                            print(f'{green}>>{tek_choice.name.title()} added to inventory<<{end}')
                            player.gp -= tek_choice.price
                            player.save_game('load.json') 
                            enter()
                            continue
                        else: 
                            print('You cannot afford this item.') 
                            enter()
                            continue
                    elif answer in ['r', 'read', 'read desc', 'read description', 'desc']:
                        print(tek_choice.desc)
                        enter()
                    elif answer in ['e', 'exit', 'x', 'l', 'leave']: continue
                    else: 
                        print("Invalid command. Valid comands: ['b', 'buy'\n'r', 'read', 'read desc', 'read description', 'desc'\n'e', 'exit', 'x', 'l', 'leave']")
                        enter()
                        continue
                else: 
                    print('Please choose a valid number.')
                    enter()
                    continue
                
        elif shop in ['l', 'leave', 'x', 'e', 'exit']:
            in_Marketplace = False
        else:
            print(f"{bold}{red}Invalid{white} command.\n\n{green}Valid{white} commands:\n{end}['s', 'shuda', 'w', 'weapons'\n'p', 'potions'\n't', 'tek', 'Tek', 'Teknology'\n'l', 'leave', 'x', 'e', 'exit'")
            enter()
            continue
def go_to_Deadzone(): ###
    pass
def go_to_Tondc(): ###
    pass
def go_to_ShallowValley(): ###
    pass

# diceroll function (used for attack & damage rolls)
def diceRoll(numOfSides):
  roll = r.randint(1, numOfSides)
  return roll

class NPC:
    num_of_NPCs = 0
    def __init__ (self, name): ###CODE THIS, ADD MORE ATTRIBUTES
        self.name = name

        NPC.num_of_NPCs += 1

class Enemy(): ### ADD CODE: any other attributes that become necessary (strength and dex)
    num_of_enemies = 0
    def __init__ (self, name, armor_class, strength, dex, currentHP, HP, dropItem, dropGP, equipped_weapon=None):
        self.name = name
        self.armor_class = armor_class
        self.strength = strength
        self.dex = dex
        self.currentHP = currentHP
        self.HP = HP
        self.dropItem = dropItem
        self.dropGP = dropGP
        self.equipped_weapon = equipped_weapon
        #self.strength = strength
        #self.dex = dex

        Enemy.num_of_enemies +=1 # keep a count of how many enemies exist

class Weapons: 
    num_of_weapons = 0
    def __init__(self, name, desc, price, finesse, melee, range, num_of_sides):
        self.name = name
        self.desc = desc
        self.price = price
        self.finesse = finesse
        self.melee = melee
        self.range = range
        self.num_of_sides = num_of_sides # which die needs to be rolled for that weapon
    
        Weapons.num_of_weapons += 1

class Potions:
    num_of_potions = 0
    def __init__(self, name, desc, price, effects):
        self.name = name
        self.desc = desc
        self.price = price
        self.effects = effects

        Potions.num_of_potions += 1
    
    def drinkPotion(self, user): # call function when want to drink potion/gain effectss from them
        if self.name == 'knowledge potion':
            print(knowledge_potion.effects)
            user.xp += 15
        elif self.name == 'health potion':
            print(health_potion.effects)
            user.currentHP += 5
        user.remove_from_inv(self, 1)
        return user.xp, user.currentHP
    
class Tek(Potions): 
    def __init__(self, name, desc, price, effects):
        super().__init__(name, desc, price, effects)

    def useTek(self, user): ###CODE THIS SO YOU CAN ACTUALLY USE IT IN A SCENARIO AND IT WILL INTERACT WITH RADIATION, ETC.
        if self.name == 'wristband':
            print(f"\nCHANGE THIS TO ACTUALLY AFFECT THINGS:\n{wristband.effects}") ### actually implement something you can do with it
        elif self.name == 'gas mask':
            print(f"\nCHANGE THIS TO ACTUALLY AFFECT THINGS:\n{gas_mask.effects}") ###
        elif self.name == 'the fleim':
            print(f"\nCHANGE THIS TO ACTUALLY AFFECT THINGS:\n{the_fleim.effects}") ###
        elif self.name == 'knockout gas':
            print(f"\nCHANGE THIS TO ACTUALLY AFFECT THINGS:\n{knockout_gas.effects}") ###

    def use_wristband(self):
        pass ### create functionality for radiation alert & turning on night vision, plus any other effectss you may add to it

# list of all weapons
glaive = Weapons('glaive', 'This glaive boasts a gleaming obsidian blade with intricate,\nethereal runes etched along its length, set upon a polished, ebony-hued\nshaft adorned with menacing, dragon-shaped pommel.', 20, False, True, False, 10)
rapier = Weapons('rapier', 'This rapier is an elegantly slender and silvered blade,\nits handle intricately adorned with sapphire-encrusted crossguards\nand a hilt of black leather wrapped in silver thread.', 25, False, True, False, 8)
dagger = Weapons('dagger', 'The dagger gleams with a wickedly curved obsidian blade,\na hilt wrapped in midnight-blue leather, and\na pommel adorned with a menacing onyx gemstone.', 2, True, False, False, 4)
crossbow = Weapons('crossbow', 'This crossbow features a sleek, polished mahogany stock adorned\nwith intricate ivory inlays, a glistening steel barrel, and an\nexquisitely carved ebony trigger guard, giving it\nan air of both beauty and deadly precision.', 25, False, False, True, 8)
butterfly_sword = Weapons('butterfly sword', 'The butterfly sword boasts a pair of elegantly slender blades\nwith intricately carved jade hilts, their unique S-shaped guards\ndesigned for fluid, acrobatic combat Tekniques.', 10, True, False, False, 6)
reaper_stick = Weapons('reaper stick', 'WRITE DESCRIPTION', 10, False, True, False, 8)
reaper_cleaver = Weapons('reaper cleaver', 'The Reaper Cleaver is a massive, double-edged greataxe\nwith a rusted and jagged blade, imbued with a menacing aura,\nsuggesting the cruelty of its wielder.', 30, False, True, False, 12)
weapons_all = [glaive, rapier, dagger, crossbow, butterfly_sword, reaper_stick, reaper_cleaver]

# list of all potions
health_potion = Potions('health potion', 'A glimmering green liquid', 3, "You ingest the green potion and gain 5 health")
knowledge_potion = Potions('knowledge potion', 'A swirling pearl potion which helps you gain knowledge', 5, "You drink the potion and gain 15 XP")
potions_all = [health_potion, knowledge_potion]

# list of all tek
wristband = Tek('wristband', 'These wristbands came with the original 102 to the ground.\nThey were used to measure their vital signs and to\ncommunicate with those still on the Ark.', 50, 'This helpful wristband will give you radiation alerts and night-vision.')
gas_mask = Tek('gas mask', 'A gas mask is crucial in a radiation-struck world.\nIt filters out knockout gas and other toxic pollutants.', 35, 'Renders the wearer immune to knockout gas\nand less susceptible to radiation and Earth\'s toxic air')
knockout_gas = Tek('vial of knockout gas','Knockout gas is used by the mountain men.\nIt is a potent chemical agent which, like\nthe name says, knocks out whoever inhales it.', 50, 'Everyone within a 10mi radius') ### change radius it affects?
the_fleim = Tek('the fleim', 'The Fleim, a sacred artifact, embodies the collective wisdom and\nspirits of past Commanders, guiding us with their knowledge and insight.', 3000, 'A natblida who wins the conclave must take the Fleim and\nrecite the lineage in order to ascend as Commander.\nThe Fleimkepa acts as protecter of the Fleim and of the Commander.')
tek_for_sale = [wristband, gas_mask, knockout_gas]
tek_all = [wristband, gas_mask, the_fleim, knockout_gas]

# list of enemies
### THINK ABOUT adding these attributes to Enemy: list of different attack options, 4 options for damage they can do to player (either damage can be randomly chosen or we give them str/dex modifiers for it), death (a string with how each enemy dies)
reaper = Enemy('reaper', 12, 4, 3, 15, 15, reaper_stick, 3, dagger)
azgeda = Enemy('azgeda warrior', 15, 3, 4, 20, 20, butterfly_sword, 5, rapier)
mountain_man = Enemy('mountain man', 18, 3, 4, 15, 18, knockout_gas, 10, crossbow)

random_enemy_list = [reaper, azgeda] # list of enemies that randomly spawn
random_enemy = r.choice(random_enemy_list) 
enemies_all = [reaper, azgeda, mountain_man]


## RUN GAME ##
player = None
while run:
    while mainMenu: # in main menu
        clear()
        draw()
        print("1. New Game\n2. Load Game\n3. Quit game") # menu options
        draw()
        choice = input("> ").strip().lower() # choice
        clear()
        if choice in ['1', 'n', 'new', 'new game']: # new game
            while True:
                choose_fighter()
                fighter = input("> ").strip().lower()
                if fighter in ['j', 'jaka','t', 'thief']:
                    player = Player('Jaka', 20, 20, 10, 3, 4, 0, 15, None, None, {}) # passing in information about player
                    # starting inventory items
                    player.add_to_inv(dagger, 1) 
                    player.add_to_inv(health_potion, 3)
                    player.add_to_inv(knowledge_potion, 1)
                    enter()
                    break
                elif fighter in ['w', 'wanheda', 'c', 'commander of death']:
                    player  = Player('Wanheda', 20, 20, 10, 4, 2, 0, 15, None, None, {})
                    # starting inventory items
                    player.add_to_inv(rapier, 1) 
                    player.add_to_inv(health_potion, 3)
                    player.add_to_inv(knowledge_potion, 1)
                    enter()
                    break
                elif fighter in ['f', 'fleimkepa', 'flamekeeper', 'fleim', 'flame']:
                    player  = Player('Fleimkepa', 20, 20, 10, 3, 5, 0, 15, None, None, {})
                    # starting inventory items
                    player.add_to_inv(glaive, 1) 
                    player.add_to_inv(health_potion, 3)
                    player.add_to_inv(knowledge_potion, 1)
                    enter()
                    break
                elif fighter in ['n', 'natblida', 'nightblood', 'natblida gona', 'nightblood warrior', 'g', 'gona', 'w', 'warrior']:
                    player  = Player('Natblida Gona', 20, 20, 10, 5, 3, 0, 15, None, None, {})
                    # starting inventory items
                    player.add_to_inv(crossbow, 1) 
                    player.add_to_inv(health_potion, 3)
                    player.add_to_inv(knowledge_potion, 1)
                    enter()
                    break
                else:  # if enter wrong thing
                    print(f"{red}{bold}Invalid{white} command\n{green}Valid {white}commands{end}:\n['j', 'jaka','t', 'thief'\n'w', 'wanheda', 'c', 'commander of death'\n'f', 'fleimkepa', 'flamekeeper', 'fleim', 'flame'\n'n', 'natblida', 'nightblood', 'natblida gona', 'nightblood warrior', 'g', 'gona', 'w', 'warrior']")
                    enter()
                    clear()
                
            if player is not None:
                player.save_game('load.json')
            mainMenu = False
            play = True
            clear()
        
        elif choice in ['2', 'l', 'load', 'load game']: # load game
            loaded_player = Player.load_game('load.json') # assign loaded player
            if loaded_player is not None:
                player = loaded_player
                print(f"Welcome back, {player.name}")
                enter()
                mainMenu = False
                play = True
            else:
                print("Corrupt save file or no file found!")
                enter()
                mainMenu = True
                play = False

        elif choice in ['3', 'q', 'quit', 'quit game', 'x']: # quit game
            quit = input("\nAre you sure you want to quit the game (y/n)?\n> ").strip().lower()
            if quit == "y":
                clear()

                print("Goodbye!")
                exit()

        else: # if enter wrong thing
            print(f"{bold}{red}Invalid{white} command.\n{green}Valid{white} commands:{end}\n['1', 'n', 'new', 'new game'\n'2', 'l', 'load', 'load game'\n'3', 'q', 'quit', 'quit game', 'x']")
            enter()
            break

    while play:
        player.save_game('load.json') # autosave
        go_to_Polis()


## BUGS
'''
1.  When you load a saved game, the inventory functionality stops working. 
    It won't let you select an inventory item. When you buy something at market, 
    it also does not increase quantity of items if you already have one in your inventory. 
    It adds a whole new item. This may give some insight onto why it isn't loading properly? 
    It is seeing these as strinsg and not objects perhaps?
    --> Perhaps an issue with how the data is saved/loaded into the game?'''

## Notes as of 10/03/2023
'''
Ideas to build on:
1. Considering making this a 2d game instead of text based as an opportunity to expand my skillset further.
   Going to learn pygame and then decide if it is the right move for this game. --> so far, i don't think it 
   is unless i want to make all original artwork
2. Will likely add radiation levels to the game so there may be waves of radiation which could affect order of events. 
   I.e., there is a wave of radiation and you need to use some resources to survive that. (could also have mountain men 
   ambush with acid fog/knock-out gas)
3. I may change the setting from Earth to Sanctum. It will introduce other environmental elements such as the red sun 
   eclipse & the anomaly

NEXT STEPS:
1. Need to add ability to actually use tek in a scenario where it can help
2. Change setting from Earth to Sanctum, start diving more into the actual storyline/game rather than setting up mechanics
    --> decide if the game will be linear, include quests, etc.
3. Break game up into multiple documents so the code isn't so long?

Changes made since last github update:
1. Moved the attack method to the player class instead of the weapons class, as it made more sense that way.
2. Added enemy attacks as well as made the battle UI more physically appealing and gave player option to use an inventory item as their turn
'''
