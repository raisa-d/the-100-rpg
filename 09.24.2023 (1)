## The 100 RPG Game 
## Making classes for player, NPCs, weapons, potions  ##

import random as r, os, pickle, time as t

# default booleans
run = True # game is running
mainMenu = True # on main menu
play = False # playing game

# booleans for locations
in_Dropship = False
in_MtWeather = False
in_Polis = False
in_TrikruWoods = False
in_Deadzone = False
in_ShallowValley = False
in_Tondc = False
in_Marketplace = False

# colors
bold = "\033[1m"
normal = "\x1b[0m" + "\x1b[38;2;255;255;255m"
italic = "\033[3m"
underline = "\033[4m"
strike = "\033[9m" # strikethrough
end = "\033[0m" # end any formatting
gold = "\x1b[38;2;230;190;0m\x1b[1m"
silver = "\x1b[38;2;221;221;221m\x1b[1m"
copper = "\x1b[38;2;170;44;0m\x1b[1m"
red = "\033[31m"
orange = '\x1b[38;2;255;90;0m\x1b[1m'
yellow = "\033[33m"
green = "\033[32m"
blue =  "\033[34m"
purple = "\033[35m"
cyan = "\033[36m"
white = "\033[37m"
gray = "\033[1;30m"

# formatting
def Title(): # print out game header
    title = "The 100 Role Player Game"
    Title = f"{italic}{bold}{green}{title:^80}{end}"
    author = f"{purple}by @RaiBread{end}"
    print(Title)
    print(f"{author:^90}\n")
def clear():
    os.system("clear")
    os.system("clear")
    Title()
def enter():
    input(f"\n[{bold}{cyan}Enter{end}] to continue\n")
def draw():
    print(f"{strike}Xx         xOx        xX{end}")

# functions for gameplay
def choose_fighter():
    clear()
    print("\nChoose your class:\n")
    draw()
    print(f"[{bold}{red}Jaka {normal}(Thief){end}\t\t\t\tGood strength       |  Excellent dexterity  |  Dagger")
    print(f"[{bold}{yellow}Wanheda {normal}(Commander of Death){end}\t\tExcellent strength  |  Ok dexterity         |  Rapier")
    print(f"[{bold}{cyan}Fleimkepa {normal}(Flamekeeper){end}\t\tGood strength       |  Excellent dexterity  |  Glaive")
    print(f"[{bold}{purple}Natblida Gona {normal}(Nightblood Warrior){end}\tExcellent strength  |  Good dexterity       |  Crossbow")
    draw()
def go_to_Polis():
    clear()
    print(f"As you approach the imposing gates of {bold}{yellow}Polis{end} a sense of wonder\nand trepidation washes over you.\nThe ancient city stands as a testament to resilience in\na world devastated by nuclear catastrophe.\n")
    input(f"[{cyan}{bold}Enter{end}] to walk through the gates\n")
    inPolis = True
    while inPolis:
        clear()
        print(f"Location: {red}{underline}{bold}Polis{end}\n")
        print("The square is alive with the chatter of Grounders in various outfits,\neach representing their clan. Warriors bearing weapons stride with\nconfidence, while traders and healers offer their wares and services at their\nmarket stalls. Grounder children play among the bustling crowd.\n")
        print(f"{bold}Exit | {gold}Inv {white}| {red}Save {white}| {blue}Stats {white}| {copper}Marketplace{white} | {green}Converse {white}|{end}")
        action = input("> ").strip().lower()
        if action in ['e', 'x', 'exit']: # exit
            player.save_game('load.txt') # autosave
            print("Goodbye!")
            quit()
        if action in ['i', 'inv', 'inventory']: # inventory
            player.print_inventory()
        elif action == "save":
            player.save_game('load.txt') # autosave
            print(f"{green}>>saved<<")
            t.sleep(0.5)
        elif action in ['s', 'stats']: # stats
            player.print_stats()
        elif action in ['m', 'marketplace', 'market', 'store']: # marketplace
            # print cutscene of entering marketplace
            go_to_Market() ### MAKE STORE FUNCTION SO YOU CAN HAVE OPTION TO BUY THINGS IN OTHER PLACES TOO
        elif action in ['c', 'converse', 'talk']: # converse
            pass ### ADD CONVERSATIONS HERE
        else:
            print(f"{red}{bold}Invalid{end} command.")
            t.sleep(0.5)
            print(f"\n{bold}{green}Valid{end} commands:\n['e', 'x', 'exit'\n'i', 'inv', 'inventory'\n's', 'stats'\n'm', 'marketplace', 'market', 'store'\n'c', 'converse', 'talk']")
            enter()
def go_to_Dropship(): ###
    pass
def go_to_MtWeather(): ###
    pass
def go_to_TrikruWoods(): ###
    pass
def go_to_Market(): ###
    global in_Marketplace
    in_Marketplace = True
    while in_Marketplace:
        clear()
        print(f"The market stalls are adorned with colorful fabrics and\ngoods from each clan.\nThey offer you their wares as you pass by each stall.\n\n{bold}What kind of goods are you looking for?\n{end}")
        print(f"| {bold}{copper}Shuda {white}(Weapons) | {bold}{purple}Potions{white} | {bold}{blue}Tek{white} (Tech) | {bold}{gray}Leave |{end}")
        shop = input("> ").strip().lower()
        if shop in ['s', 'shuda', 'w', 'weapons']:
            clear()
            print(f'{bold}{copper}Shuda Kofgeda{end}') ### ADD weapons shop
            enter()
        elif shop in ['p', 'potions']:
            clear()
            print(f'{bold}{purple}Potions Kofgeda{end}') ### ADD potions shop
            enter()
        elif shop in ['t', 'tek', 'tech', 'technology']:
            clear()
            print(f'{bold}{blue}Tek Kofgeda{end}') ### ADD tech shop
            enter()
        elif shop in ['l', 'leave', 'x', 'e', 'exit']:
            in_Marketplace = False
        else:
            print(f"{bold}{red}Invalid{white} command.\n\n{green}Valid{white} commands:\n{end}['s', 'shuda', 'w', 'weapons'\n'p', 'potions'\n't', 'tek', 'tech', 'technology'\n'l', 'leave', 'x', 'e', 'exit'")
            continue

def go_to_Deadzone(): ###
    pass
def go_to_Tondc(): ###
    pass
def go_to_ShallowValley(): ###
    pass

# diceroll function (used for attack & damage rolls)
def diceRoll(numOfSides):
  roll = r.randint(1, numOfSides)
  return roll

class Player:
    def __init__(self, name, currentHP, maxHP, gp, strength, dex, xp, equipped_weapon=None, inv=None):
        self.name = name
        self.currentHP = currentHP
        self.maxHP = maxHP
        self.gp = gp
        self.strength = strength
        self.dex = dex
        self.xp = xp
        self.equipped_weapon = equipped_weapon
        if inv is None: # doing this so we don't have a mutable list set as the default
            self.inv = {}
        else:
            self.inv = inv

    def add_to_inv(self, item, quantity):
        if item in self.inv: # if already have this item
            self.inv[item] += quantity # add quantity of it to existing quantity
        else: # if new item
            self.inv[item] = quantity # create new entry in inventory

    def remove_from_inv(self, item, quantity):
        if item in self.inv:
            if self.inv[item] >= quantity: 
                self.inv[item] -= quantity
                if self.inv[item] == 0:
                    del self.inv[item] # remove entry if quantity reaches 0
            else:
                print(f"You don't have enough {item.name} in your inventory")
        else:
            print(f"You don't have {item.name} in your inventory")

    def print_inventory(self): ### ADD: have it also print the quantity of each item in inventory
        while True:
            clear()
            print(f"{bold}{underline}{self.name}{end}")
            print(f"\n{green}Health{end}: {self.currentHP}/{self.maxHP} ðŸ©¸") # printing health
            print(f"{gold}Gold{end}: {self.gp}")
            if self.equipped_weapon is not None:
                print(f"\n{bold}Equipped Weapon:{end} {(self.equipped_weapon.name).title()}\n")
            else:
                print(f"\n{bold}Equipped Weapon:{end} {self.equipped_weapon}\n")
            print(f"\n{bold}{purple}Inventory:\n{end}")
            
            draw()
            counter = 1
            for item, quantity in self.inv.items(): # print inventory
                print(f"{purple}{counter}.{white} ", *item.name.title(), f" x {quantity}", sep = "", end = "\n")
                counter += 1
            draw()

            # inventory choices
            print(f"\n[{cyan}{bold}l{end}] to leave")
            choice = input("> ").strip().lower()
            if choice in ['l', 'leave', 'x', 'exit']: # leave
                break
            elif choice.isdigit():
                item_index = int(choice) - 1 # converting choice into an index of the inventory
                if 0 <= item_index <len(self.inv): # check whether item_index is in valid range of indices for inventory
                    selected_item = list(self.inv.keys())[item_index] # assigning selected_item to item in inventory

                    for potion in potions_all:
                        if selected_item == potion: # if potion
                            while True:
                                print(f"\n{selected_item.name.title()}\nWhat would you like to do?\n| Sell | Exit | Use | Desc")
                                option = input("\n> ").strip().lower()
                                if option in ['s', 'sell']: # sell
                                    self.remove_from_inv(selected_item, 1)
                                    print(f"{gold}>> {selected_item.name} sold for {selected_item.price} gp <<{end}")
                                    self.gp += selected_item.price
                                    enter()
                                    break
                                elif option in ['e', 'x', 'exit']: # exit
                                    break
                                elif option in ['u', 'use', 'equip']: # use
                                    selected_item = potion
                                    selected_item.drinkPotion(self)
                                    enter()
                                    break
                                elif option in ['d', 'desc', 'description']: # description
                                    selected_item = potion
                                    print(selected_item.desc)
                                    enter()
                                    break
                                else:
                                    print(f"{red}Invalid{end} Command\n\n{green}Valid{end} Commands:\n['s', 'sell'\n'e', 'x', 'exit'\n'u', 'use', 'equip'\n'd', 'desc', 'description']")
                                    enter()

                    for weapon in weapons_all:
                        if selected_item == weapon: # if weapon
                            while True:
                                print(f"\n{selected_item.name.title()}\nWhat would you like to do?\n| Sell | Exit | Equip | Desc")
                                option = input("\n> ").strip().lower()
                                if option in ['s', 'sell']: # sell
                                    self.remove_from_inv(selected_item, 1)
                                    print(f">>{selected_item.name} sold for {gold}{selected_item.price} gp{end}<<")
                                    self.gp += selected_item.price
                                    if selected_item == self.equipped_weapon:
                                        self.equipped_weapon = None
                                    enter()
                                    break
                                elif option in ['x', 'exit']: # exit
                                    break
                                elif option in ['e', 'equip', 'u', 'use']: # equip
                                    selected_item = weapon
                                    self.equip_weapon(selected_item)
                                    break
                                elif option in ['d', 'desc', 'description']: # description
                                    selected_item = weapon
                                    print(selected_item.desc)
                                    enter()
                                    break
                                else:
                                    print(f"{red}Invalid{end} Command\n\n{green}Valid{end} Commands:\n['s', 'sell'\n'x', 'exit'\n'e', 'equip', 'u', 'use'\n'd', 'desc', 'description']")
                                    enter()
                                    continue
            else:
                print(f"{bold}{red}Invalid{white} command.\n{green}Valid{white} commands:{end}\n['l', 'leave', 'x', 'exit'\nor the corresponding number to the inventory item you want to select]")
                enter()

    def equip_weapon(self, selected_weapon):
        found_weapon = None

        for weapon in weapons_all:
            if weapon == selected_weapon:
                found_weapon = weapon
                break
        
        if found_weapon:
            self.equipped_weapon = found_weapon
            print(f"{green}>>{found_weapon.name} equipped<<{end}")
            t.sleep(0.5)
        else:
            print(f"You don't have {selected_weapon} in your inventory.")
            enter()

    def print_stats(self):
        clear()
        print(f"{bold}{underline}{player.name}{end}")
        print(f"\n{green}{bold}Health{end} | {self.currentHP}/{self.maxHP} ðŸ©¸\n{gold}Gold{end} | {self.gp}\n\n{red}{bold}Strength {end}| {self.strength}\n{purple}{bold}Dexterity{end} | {self.dex}\n{blue}{bold}XP {end}| {player.xp}")
        enter()

    def save_game(self, filename):
        with open(filename, "wb") as file:
            pickle.dump(self, file)

    @staticmethod
    def load_game(filename): ### FIX: There is a problem when loading from a new game, doesn't recognize player
        try:
            with open(filename, "rb") as file:
                loaded_player = pickle.load(file)
                return loaded_player
        except FileNotFoundError:
            return None

class NPC:
    num_of_NPCs = 0
    def __init__ (self, name): ###CODE THIS, ADD MORE ATTRIBUTES
        self.name = name

        NPC.num_of_NPCs += 1

class Enemy: ### ADD CODE: any other attributes that become necessary
    num_of_enemies = 0
    def __init__ (self, name, armor_class, currentHP, HP, dropItem, dropGP):
        self.name = name
        self.armor_class = armor_class
        self.currentHP = currentHP
        self.HP = HP
        self.dropItem = dropItem
        self.dropGP = dropGP

        Enemy.num_of_enemies +=1 # keep a count of how many enemies exist

    def enemyAttack(self):
        pass ### FUNCTION FOR ENEMY'S TURN IN BATTLE

class Weapons: 
    num_of_weapons = 0
    def __init__(self, name, desc, price, finesse, melee, range, num_of_sides):
        self.name = name
        self.desc = desc
        self.price = price
        self.finesse = finesse
        self.melee = melee
        self.range = range
        self.num_of_sides = num_of_sides # which die needs to be rolled for that weapon
    
        Weapons.num_of_weapons += 1
    
    def attack(self, enemy): ### ADD alter code so this is a two-way battle
        if self.finesse == True: # if weapon is finesse, choose between strength and dexterity for your attack
            strength_or_dex = input(f"Do you want to use your Strength ({player.strength}) or Dexterity ({player.dex}) modifier?\n> ").strip().lower()
            ### ADD THE ENEMY'S ATTACKS TO THIS ONCE YOU CREATE THE ENEMIES ###
            while enemy.currentHP > 0: 
                if strength_or_dex in ['s', 'strength', 'str'] or strength_or_dex[0] == str(f'{player.strength}'): # if choose strength
                    attack_roll = diceRoll(20) + player.strength
                    if attack_roll >= enemy.armor_class: # if attack roll successful, on to do damage
                        damage_roll = diceRoll(self.num_of_sides) + player.strength
                        enemy.currentHP -= damage_roll
                        print(f'\nYou were adept with your {self.name} and dealt the {enemy.name} {damage_roll} damage!\nThe {enemy.name} has {enemy.currentHP}/{enemy.HP} HP')
                        enter()
                        clear()
                    else: 
                        print("You miss them and deal no damage.")
                        enter()
                        clear()
                elif strength_or_dex in ['d', 'dex', 'dexterity'] or strength_or_dex[0] == str(f'{player.dex}'): # if choose dex
                    attack_roll = diceRoll(20) + player.dex
                    if attack_roll >= enemy.armor_class: # if attack roll successful, on to do damage
                        damage_roll = diceRoll(self.num_of_sides) + player.dex
                        enemy.currentHP -= damage_roll
                        print(f'\nYou were adept with your {self.name} and dealt the {enemy.name} {damage_roll} damage!\nThe {enemy.name} has {enemy.currentHP}/{enemy.HP} HP')
                        enter()
                        clear()
                    else: 
                        print("You miss them and deal no damage.")
                        enter()
                        clear()
                else:
                    print("{bold}{red}Invalid{end} command.\n\n{bold}{green}Valid{end} commands:\n's', 'strength', 'str'\n'd', 'dex', 'dexterity'")

        elif self.melee == True:
            input('Hit any key to attack') ### ADD: give two attack options
            while enemy.currentHP > 0: 
                clear()
                attack_roll = diceRoll(20) + player.strength
                if attack_roll >= enemy.armor_class:
                    damage_roll = diceRoll(self.num_of_sides) + player.strength
                    enemy.currentHP -= damage_roll
                    print(f'\nYou were adept with your {self.name} and dealt the {enemy.name} {damage_roll} damage!\nThe {enemy.name} has {enemy.currentHP}/{enemy.HP} HP')
                    enter()
                    clear()
                else: 
                    print("You miss them and deal no damage.")
                    enter()
                    clear()

        elif self.range == True: # if range weapon, use dexterity modifier
            input('Hit any key to attack') ### ADD: give two attack options
            while enemy.currentHP > 0: 
                clear()
                attack_roll = diceRoll(20) + player.dex
                if attack_roll >= enemy.armor_class:
                    damage_roll = diceRoll(self.num_of_sides) + player.dex
                    enemy.currentHP -= damage_roll
                    print(f'\nYou were adept with your {self.name} and dealt the {enemy.name} {damage_roll} damage!\nThe {enemy.name} has {enemy.currentHP}/{enemy.HP} HP')
                    enter()
                    clear()
                else: 
                    print("You miss them and deal no damage.")
                    enter()
                    clear()
            
        if enemy.currentHP <= 0:
            print(f"You have defeated the {enemy.name}! They dropped a {bold}{copper}{enemy.dropItem.name}{end} and {gold}{enemy.dropGP} gp{end}")
            player.add_to_inv(enemy.dropItem, 1)
            player.gp += enemy.dropGP
            enter()
            return player.inv, player.gp

class Potions:
    num_of_potions = 0
    def __init__(self, name, desc, price, effect):
        self.name = name
        self.desc = desc
        self.price = price
        self.effect = effect

        Potions.num_of_potions += 1
    
    def drinkPotion(self, user): # call function when want to drink potion/gain effects from them
        if self.name == 'knowledge potion':
            print(knowledge_potion.effect)
            user.xp += 15
        elif self.name == 'health potion':
            print(health_potion.effect)
            user.currentHP += 5
        user.remove_from_inv(self, 1)
        return user.xp, user.currentHP
    
class Tech(Potions): ### ADD TECH
    pass

# list of all weapons
glaive = Weapons('glaive', 'This glaive boasts a gleaming obsidian blade with intricate,\nethereal runes etched along its length, set upon a polished, ebony-hued\nshaft adorned with menacing, dragon-shaped pommel.', 20, False, True, False, 10)
rapier = Weapons('rapier', 'This rapier is an elegantly slender and silvered blade,\nits handle intricately adorned with sapphire-encrusted crossguards\nand a hilt of black leather wrapped in silver thread.', 25, False, True, False, 8)
dagger = Weapons('dagger', 'The dagger gleams with a wickedly curved obsidian blade,\na hilt wrapped in midnight-blue leather, and\na pommel adorned with a menacing onyx gemstone.', 2, True, False, False, 4)
crossbow = Weapons('crossbow', 'This crossbow features a sleek, polished mahogany stock adorned\nwith intricate ivory inlays, a glistening steel barrel, and an\nexquisitely carved ebony trigger guard, giving it\nan air of both beauty and deadly precision.', 25, False, False, True, 8)
butterfly_sword = Weapons('butterfly sword', 'The butterfly sword boasts a pair of elegantly slender blades\nwith intricately carved jade hilts, their unique S-shaped guards\ndesigned for fluid, acrobatic combat techniques.', 10, True, False, False, 6)
reaper_stick = Weapons('reaper stick', 'WRITE DESCRIPTION', 10, False, True, False, 8)
reaper_cleaver = Weapons('reaper cleaver', 'The Reaper Cleaver is a massive, double-edged greataxe\nwith a rusted and jagged blade, imbued with a menacing aura,\nsuggesting the cruelty of its wielder.', 30, False, True, False, 12)
weapons_all = [glaive, rapier, dagger, crossbow, butterfly_sword, reaper_stick, reaper_cleaver]

# list of all potions
health_potion = Potions('health potion', 'A glimmering green liquid', 3, "You ingest the green potion and gain 5 health")
knowledge_potion = Potions('knowledge potion', 'A swirling pearl potion which helps you gain knowledge', 5, "You drink the potion and gain 15 XP")
potions_all = [health_potion, knowledge_potion]

# list of all enemies
### THINK ABOUT adding these attributes to Enemy: list of different attack options, 4 options for damage they can do to player (either damage can be randomly chosen or we give them str/dex modifiers for it), death (a string with how each enemy dies)
reaper = Enemy('reaper', 10, 15, 15, reaper_stick, 3)
azgeda = Enemy('azgeda warrior', 12, 20, 20, butterfly_sword, 5)
enemy_list = [reaper, azgeda] # list of enemies
the_enemy = r.choice(enemy_list) 

## RUN GAME ##
player = None
while run:
    while mainMenu: # in main menu
        clear()
        draw()
        print("1. New Game\n2. Load Game\n3. Quit game") # menu options
        draw()
        choice = input("> ").strip().lower() # choice
        clear()
        if choice in ['1', 'n', 'new', 'new game']: # new game
            while True:
                choose_fighter()
                fighter = input("> ").strip().lower()
                if fighter in ['j', 'jaka','t', 'thief']:
                    player = Player('Jaka', 20, 20, 10, 3, 4, 0, None, None) # passing in information about player
                    # starting inventory items
                    player.add_to_inv(dagger, 1) 
                    player.add_to_inv(health_potion, 3)
                    player.add_to_inv(knowledge_potion, 1)
                    enter()
                    break
                elif fighter in ['w', 'wanheda', 'c', 'commander of death']:
                    player  = Player('Wanheda', 20, 20, 10, 4, 2, 0, None, None)
                    # starting inventory items
                    player.add_to_inv(rapier, 1) 
                    player.add_to_inv(health_potion, 3)
                    player.add_to_inv(knowledge_potion, 1)
                    enter()
                    break
                elif fighter in ['f', 'fleimkepa', 'flamekeeper', 'fleim', 'flame']:
                    player  = Player('Fleimkepa', 20, 20, 10, 3, 5, 0, None, None)
                    # starting inventory items
                    player.add_to_inv(glaive, 1) 
                    player.add_to_inv(health_potion, 3)
                    player.add_to_inv(knowledge_potion, 1)
                    enter()
                    break
                elif fighter in ['n', 'natblida', 'nightblood', 'natblida gona', 'nightblood warrior', 'g', 'gona', 'w', 'warrior']:
                    player  = Player('Natblida Gona', 20, 20, 10, 5, 3, 0, None, {})
                    # starting inventory items
                    player.add_to_inv(crossbow, 1) 
                    player.add_to_inv(health_potion, 3)
                    player.add_to_inv(knowledge_potion, 1)
                    enter()
                    break
                else:  # if enter wrong thing
                    print(f"{red}{bold}Invalid{white} command\n{green}Valid {white}commands{end}:\n['j', 'jaka','t', 'thief'\n'w', 'wanheda', 'c', 'commander of death'\n'f', 'fleimkepa', 'flamekeeper', 'fleim', 'flame'\n'n', 'natblida', 'nightblood', 'natblida gona', 'nightblood warrior', 'g', 'gona', 'w', 'warrior']")
                    enter()
                    clear()
                
            if player is not None:
                player.save_game('load.txt')
            mainMenu = False
            play = True
            clear()
        
        elif choice in ['2', 'l', 'load', 'load game']: # load game
            loaded_player = Player.load_game('load.txt') # assign loaded player
            if loaded_player is not None:
                player = loaded_player
                print(f"Welcome back, {player.name}")
                enter()
                mainMenu = False
                play = True
            else:
                print("Corrupt save file or no file found!")
                enter()
                mainMenu = True
                play = False

        elif choice in ['3', 'q', 'quit', 'quit game', 'x']: # quit game
            quit = input("\nAre you sure you want to quit the game (y/n)?\n> ").strip().lower()
            if quit == "y":
                clear()

                print("Goodbye!")
                exit()

        else: # if enter wrong thing
            print(f"{bold}{red}Invalid{white} command.\n{green}Valid{white} commands:{end}\n['1', 'n', 'new', 'new game'\n'2', 'l', 'load', 'load game'\n'3', 'q', 'quit', 'quit game', 'x']")
            enter()
            break
        #mainMenu = False # not sure if need these here
        #play = True

    while play:
        player.save_game('load.txt') # autosave
        go_to_Polis()



## TESTING
# player.equipped_weapon.attack(the_enemy)

## BUGS
'''
1.  When you load a saved game, the inventory functionality stops working. 
    It won't let you select an inventory item. --> Perhaps an issue with how the data is saved/loaded into the game?'''
